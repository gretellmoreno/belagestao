import React, { useState, useEffect, useRef, useCallback } from 'react';
import { format, parseISO, startOfDay, endOfDay, subDays } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { supabase } from '../lib/supabaseClient';
import { NumericFormat } from 'react-number-format';
import '../styles/loader.css';
import { Calendar, CalendarRange, X, History, DollarSign, Save, Receipt, User, CreditCard, Filter, ChevronDown, FileText, Percent, Info, AlertTriangle, CheckCircle, XCircle, HelpCircle, MinusCircle, Plus, Edit, Trash2, ShoppingBag } from 'lucide-react';
import { toast } from 'react-toastify';
import DatePicker, { registerLocale } from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";

// Registrar localização para pt-BR
registerLocale('pt-BR', ptBR);

// Estilo global para o DatePicker
const datePickerStyle = `
  .react-datepicker-popper {
    z-index: 9999999 !important;
  }
  
  .react-datepicker {
    font-family: 'Inter', sans-serif !important;
    font-size: 0.7rem !important;
    border-radius: 8px !important;
    border: 1px solid #e5e7eb !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
    max-width: 260px !important;
  }
  
  .react-datepicker__month-container {
    float: none !important;
    width: 100% !important;
  }
  
  .react-datepicker__header {
    padding: 0.5rem !important;
    background-color: #f9fafb !important;
    border-bottom: 1px solid #e5e7eb !important;
  }
  
  .react-datepicker__current-month {
    font-size: 0.8rem !important;
    color: #111827 !important;
    font-weight: 600 !important;
    padding: 0.2rem 0 !important;
  }
  
  .react-datepicker__day-names {
    display: flex !important;
    justify-content: space-around !important;
    padding: 0.3rem 0 !important;
    margin-bottom: 0 !important;
  }
  
  .react-datepicker__day-name {
    color: #6366f1 !important;
    font-weight: 500 !important;
    margin: 0 !important;
    width: 1.5rem !important;
    font-size: 0.65rem !important;
  }
  
  .react-datepicker__month {
    margin: 0 !important;
    padding: 0.3rem !important;
  }
  
  .react-datepicker__week {
    display: flex !important;
    justify-content: space-around !important;
  }
  
  .react-datepicker__day {
    width: 1.5rem !important;
    height: 1.5rem !important;
    line-height: 1.5rem !important;
    margin: 0 !important;
    border-radius: 50% !important;
    color: #374151 !important;
    font-size: 0.7rem !important;
  }
  
  .react-datepicker__day:hover {
    background-color: #f3f4f6 !important;
  }
  
  .react-datepicker__day--selected {
    background-color: #6366f1 !important;
    color: white !important;
    font-weight: 600 !important;
  }
  
  .react-datepicker__navigation {
    top: 0.5rem !important;
    width: 1.5rem !important;
    height: 1.5rem !important;
    border-radius: 50% !important;
    background-color: #f3f4f6 !important;
  }
  
  .react-datepicker__navigation:hover {
    background-color: #e5e7eb !important;
  }
  
  .react-datepicker__navigation--previous {
    left: 0.5rem !important;
  }
  
  .react-datepicker__navigation--next {
    right: 0.5rem !important;
  }
  
  .react-datepicker__year-dropdown,
  .react-datepicker__month-dropdown {
    background-color: white !important;
    border-radius: 0.5rem !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;
    border: 1px solid #e5e7eb !important;
    padding: 0.5rem 0 !important;
    font-size: 0.7rem !important;
    max-width: 160px !important;
    max-height: 200px !important;
    overflow-y: auto !important;
  }
  
  .react-datepicker__year-option,
  .react-datepicker__month-option {
    padding: 0.3rem 1rem !important;
    cursor: pointer !important;
  }
  
  .react-datepicker__year-option:hover,
  .react-datepicker__month-option:hover {
    background-color: #f3f4f6 !important;
  }
  
  .react-datepicker__year-option--selected,
  .react-datepicker__month-option--selected {
    background-color: #6366f1 !important;
    color: white !important;
  }
  
  .react-datepicker__year-dropdown-container,
  .react-datepicker__month-dropdown-container {
    font-size: 0.7rem !important;
    margin: 0 0.3rem !important;
  }
  
  .react-datepicker__month-select,
  .react-datepicker__year-select {
    font-size: 0.7rem !important;
    padding: 0.2rem !important;
  }
  
  .react-datepicker__month-read-view,
  .react-datepicker__year-read-view {
    font-size: 0.7rem !important;
  }
  
  @media (max-width: 768px) {
    .react-datepicker-popper {
      position: fixed !important;
      top: 50% !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
    }
    
    .react-datepicker {
      max-width: 260px !important;
      margin: 0 auto !important;
    }
  }
`;

interface Professional {
  id: string;
  name: string;
}

interface Service {
  id: string;
  name: string;
  price: number;
  commission: number;
}

interface Client {
  id: string | number;
  name: string;
}

interface AppointmentData {
  id: string;
  date: string;
  time: string;
  client_id: string;
  clients: {
    id: string;
    name: string;
  };
  total_value: number;
  payment_fee: number;
  payment_method: string;
  payment_method_id?: string;
  payment_methods?: {
    id: string | number;
    name: string;
    fee: number;
  };
  commission_rate: number;
  products: SoldProductRaw[];
  services: Array<{
    name: string;
  }>;
}

interface FormattedAppointment {
  id: string;
  client: {
    id: string;
    name: string;
  };
  services: Array<{
    name: string;
    commission: number;
    price: number;
  }>;
  service_names: string[];
  date: string;
  time: string;
  total_value: number;
  payment_method: string;
  payment_fee: number;
  payment_fee_percent: number;
  commission_rate?: number;
  products: SoldProductRaw[];
  cash_closing_id?: string | null;
}

// Dados do vale de adiantamento
interface EmployeeAdvance {
  id: string;
  amount: number;
  date: string;
  professional_id: string;
  professional: Professional;
}

interface ServiceInfo {
  id: string;
  name: string;
  price: number;
  commission: number;
}

interface PaymentMethod {
  id: string | number;
  name: string;
  fee: number;
}

interface Product {
      id: string;
      name: string;
  price: number;
  cost_price: number;
}

interface SoldProduct {
  id: string;
  price: number;
  quantity: number;
  name?: string;
  cost_price: number;
}

interface SoldProductRaw {
  id: string;
  price: number | string;
  quantity: number | string;
  name?: string;
  cost_price?: number;
}

interface Appointment {
  id: string | number;
  date: string;
  time: string;
  total_value: number;
  payment_method: string;
  payment_method_id?: string | number;
  payment_methods?: {
    id: string | number;
    name: string;
    fee: number;
  };
  products: SoldProductRaw[];
  professional: {
    id: string | number;
    name: string;
  };
  client: {
    id: string | number;
    name: string;
  };
}

interface ProductSale {
  id: string;
  name: string;
  quantity: number;
  price: number;
  originalPrice?: number; // Preço original antes de descontar taxas
  cost_price: number;
  date: string;
  client?: {
    id: string;
    name: string;
  };
  source: 'appointment' | 'sale';
  payment_fee_percent?: number; // Taxa de pagamento aplicada
}

interface SaleProduct {
  id: string;
  name: string;
  quantity: string | number;
  price: string | number;
  cost_price: string | number;
}

interface HistoricalData {
  advances: {
    id: string;
    amount: number;
    date: string;
    professional: {
      id: string;
      name: string;
    };
  }[];
  cashClosings: Appointment[];
  productSales: ProductSale[];
  totalAdvances: number;
  totalEarnings: number;
  totalCommissions: number;
  totalPaymentFees: number;
  totalProductProfit: number;
  loading: boolean;
}

interface CashClosing {
  id: string;
  professional_id: string;
  date: string;
  total_earnings: number;
  total_payment_fees: number;
  total_commissions: number;
  total_advances: number;
  net_income: number;
  period_start: string;
  period_end: string;
}

interface AppointmentResponse {
  id: string;
  date: string;
  client_id: string;
  professional_id: string;
  service_id: string;
  value: number;
  payment_methods: PaymentMethod[];
  client: {
    id: string;
    name: string;
  };
  professional: Professional;
}

interface Sale {
  id: string;
  date: string;
  products: SaleProduct[];
  clients: Client;
}

interface AppointmentWithRelations extends AppointmentResponse {
  payment_methods?: {
    id: string | number;
    name: string;
    fee: number;
  };
  clients?: {
    id: string | number;
    name: string;
  };
}

interface SupabaseVale {
  id: string;
  amount: number;
  date: string;
  professional_id: string;
  cash_closing_id: string | null;
  professional: {
    id: string;
    name: string;
  };
}

export default function Finances() {
  const [selectedTab, setSelectedTab] = useState('resumo');
  const [professionals, setProfessionals] = useState<Professional[]>([]);
  const [selectedProfessional, setSelectedProfessional] = useState<string>('');
  const [startDate, setStartDate] = useState<Date>(new Date());
  const [endDate, setEndDate] = useState<Date>(new Date());
  const [isUpdating, setIsUpdating] = useState(false);
  const [selectedPeriod, setSelectedPeriod] = useState<'today' | '7days' | '30days' | '90days' | 'custom'>('custom');
  const [historicalData, setHistoricalData] = useState<HistoricalData>({
    advances: [],
    cashClosings: [],
    productSales: [],
    totalAdvances: 0,
    totalEarnings: 0,
    totalCommissions: 0,
    totalPaymentFees: 0,
    totalProductProfit: 0,
    loading: true
  });
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [vales, setVales] = useState<EmployeeAdvance[]>([]);
  const [loadingVales, setLoadingVales] = useState(false);
  const [editingVale, setEditingVale] = useState<EmployeeAdvance | null>(null);

  // Estados para o caixa do profissional
  const [activeTab, setActiveTab] = useState('historico');
  const [cashSelectedProfessional, setCashSelectedProfessional] = useState('');
  const [cashStartDate, setCashStartDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [cashEndDate, setCashEndDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [appointments, setAppointments] = useState<FormattedAppointment[]>([]);
  const [employeeAdvances, setEmployeeAdvances] = useState<EmployeeAdvance[]>([]);
  const [loadingCash, setLoadingCash] = useState(false);
  const [cashMessage, setCashMessage] = useState({ type: '', text: '' });
  const [showClosedCashModal, setShowClosedCashModal] = useState(false);
  const [closedCashHistory, setClosedCashHistory] = useState<Array<{
    id: string;
    date: string;
    professional_id: string;
    total_earnings: number;
    total_payment_fees: number;
    total_commissions: number;
    total_advances: number;
    net_income: number;
    period_start: string;
    period_end: string;
    professional: {
      name: string;
    }
  }>>([]);
  const [loadingClosedCash, setLoadingClosedCash] = useState(false);
  
  // Estados para taxas de pagamento
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [loadingPaymentMethods, setLoadingPaymentMethods] = useState(false);
  const [newPaymentMethod, setNewPaymentMethod] = useState({ name: '', fee: '0' });
  const [editingPaymentMethod, setEditingPaymentMethod] = useState<PaymentMethod | null>(null);
  const [savingPaymentMethod, setSavingPaymentMethod] = useState(false);
  const [paymentMethodMessage, setPaymentMethodMessage] = useState({ type: '', text: '' });

  // Adicionar novo estado para controlar os vales selecionados
  const [selectedAdvances, setSelectedAdvances] = useState<string[]>([]);

  // Adicionar novo estado para controlar a aba ativa do histórico
  const [activeHistoryTab, setActiveHistoryTab] = useState('resumo');

  // Adicionar novos estados para filtros
  const [historyStartDate, setHistoryStartDate] = useState(format(startOfDay(new Date()), 'yyyy-MM-dd'));
  const [historyEndDate, setHistoryEndDate] = useState(format(endOfDay(new Date()), 'yyyy-MM-dd'));
  const [historyProfessional, setHistoryProfessional] = useState('');
  const [historyClientSearch, setHistoryClientSearch] = useState('');
  const [filteredAppointments, setFilteredAppointments] = useState<Appointment[]>([]);

  // Adicionar novo estado para datas fechadas
  const [closedDates, setClosedDates] = useState<string[]>([]);

  // Novo estado para o modal de ajuda
  const [showHelpModal, setShowHelpModal] = useState(false);

  // Novo estado para o modal de novo vale
  const [showNewValeModal, setShowNewValeModal] = useState(false);
  const [valeAmount, setValeAmount] = useState('');
  const [valeDate, setValeDate] = useState(format(new Date(), 'yyyy-MM-dd'));

  // Adicionar um estado para controlar se a consulta está em andamento
  const [isLoadingHistoricalData, setIsLoadingHistoricalData] = useState(false);
  // Manter referência às últimas datas consultadas para evitar consultas repetidas
  const lastFetchRef = useRef({ startDate: '', endDate: '' });

  // Adicionar novo estado para o calendário
  const [showDatePicker, setShowDatePicker] = useState(false);

  // Adicionar novo estado para o modal do calendário na seção de caixa
  const [showCashDatePicker, setShowCashDatePicker] = useState(false);
  const [cashSelectedPeriod, setCashSelectedPeriod] = useState<'today' | '7days' | '30days' | '90days' | 'custom'>('today');

  // Adicionar estado para controlar a exibição do menu dropdown
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  // Efeito para abrir a seção de histórico em dispositivos móveis
  useEffect(() => {
    // Verificar se é um dispositivo móvel usando a largura da tela
    const isMobile = window.innerWidth < 768;
    if (isMobile) {
      setActiveTab('historico');
    }
  }, []);

  // Buscar profissionais ao montar o componente
  useEffect(() => {
    fetchProfessionals();
  }, []);

  // Buscar vales ao montar o componente
  useEffect(() => {
    fetchVales();
  }, []);

  // Efeito inicial para carregar os dados
  useEffect(() => {
    // Carregar profissionais e métodos de pagamento apenas uma vez ao montar
    fetchProfessionals();
    fetchVales();
    fetchPaymentMethods();
    
    // Definir datas iniciais para hoje
    const today = new Date();
    const initialStartDate = startOfDay(today);
    const initialEndDate = endOfDay(today);
    
    // Atualizar estados de datas
    setStartDate(initialStartDate);
    setEndDate(initialEndDate);
    
    // Buscar dados históricos automaticamente ao iniciar
    fetchHistoricalData(
      format(initialStartDate, 'yyyy-MM-dd'),
      format(initialEndDate, 'yyyy-MM-dd')
    );
  }, []);
  
  // Atualizar dados quando as datas mudarem
  useEffect(() => {
    if (startDate && endDate) {
      const startDateStr = format(startOfDay(startDate), 'yyyy-MM-dd');
      const endDateStr = format(endOfDay(endDate), 'yyyy-MM-dd');
      
      fetchHistoricalData(startDateStr, endDateStr);
    }
  }, [startDate, endDate]);

  // Efeito para carregar dados específicos da aba ativa
  useEffect(() => {
    if (activeTab === 'metodos') {
      // Evita buscar novamente se já foram carregados
      if (!paymentMethods.length) {
        fetchPaymentMethods();
      }
    }
  }, [activeTab, paymentMethods.length]);

  async function fetchProfessionals() {
    try {
      const { data: professionalsData, error } = await supabase
        .from('professionals')
        .select('id, name')
        .order('name');

      if (error) throw error;

      // Mapear os dados para garantir a estrutura correta
      const formattedProfessionals: Professional[] = (professionalsData || []).map((prof: any) => ({
        id: prof.id,
        name: prof.name
      }));

      setProfessionals(formattedProfessionals);
    } catch (error) {
      console.error('Erro ao buscar profissionais:', error);
    }
  }

  const fetchVales = async () => {
    try {
      const { data, error } = await supabase
        .from('employee_advances')
        .select(`
          id,
          amount,
          date,
          professional_id,
          cash_closing_id,
          professional:professionals (id, name)
        `)
        .is('cash_closing_id', null)
        .order('date', { ascending: false });

      if (error) throw error;

      if (data) {
        const formattedVales = data.map(vale => ({
          id: String(vale.id),
          amount: Number(vale.amount),
          date: vale.date,
          professional_id: String(vale.professional_id),
          professional: {
            id: String(vale.professional.id),
            name: String(vale.professional.name)
          }
        }));

        setVales(formattedVales);
      }
    } catch (error) {
      console.error('Erro ao buscar vales:', error);
    }
  };

  async function handleEditVale(valeId: string) {
    const vale = vales.find(v => v.id === valeId);
    if (vale) {
      setEditingVale(vale);
      setSelectedProfessional(String(vale.professional_id));
      setValeAmount(String(vale.amount));
      setValeDate(format(parseISO(vale.date), 'yyyy-MM-dd'));
      setShowNewValeModal(true);
    }
  }

  async function handleDeleteVale(valeId: string) {
    try {
      const { error } = await supabase
        .from('employee_advances')
        .delete()
        .eq('id', valeId);

      if (error) throw error;
      
      toast.success('Vale excluído com sucesso');
      fetchVales();
    } catch (error) {
      console.error('Erro ao excluir vale:', error);
      toast.error('Erro ao excluir vale');
    }
  }

  // Função para limpar o formulário
  function resetForm() {
    setSelectedProfessional('');
    setValeAmount('');
    setValeDate(format(new Date(), 'yyyy-MM-dd'));
    setEditingVale(null);
    setShowNewValeModal(false);
  }

  // Função para submeter o formulário
  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (!selectedProfessional || !valeAmount || !valeDate) {
      toast.error('Por favor, preencha todos os campos');
      return;
    }

    try {
      if (editingVale) {
      const { error } = await supabase
        .from('employee_advances')
          .update({
            professional_id: selectedProfessional,
            amount: Number(valeAmount),
            date: valeDate
          })
          .eq('id', editingVale.id);

      if (error) throw error;
        toast.success('Vale atualizado com sucesso');
      } else {
        const { error } = await supabase
          .from('employee_advances')
          .insert({
            professional_id: selectedProfessional,
            amount: Number(valeAmount),
            date: valeDate
          });

        if (error) throw error;
        toast.success('Vale registrado com sucesso');
      }

      resetForm();
      fetchVales();
    } catch (error) {
      console.error('Erro ao salvar vale:', error);
      toast.error('Erro ao salvar vale');
    }
  }

  async function fetchCashDetails() {
    try {
      setLoadingCash(true);
      setCashMessage({ type: '', text: '' });

      if (!cashSelectedProfessional || !cashStartDate || !cashEndDate) {
        setCashMessage({ type: 'error', text: 'Selecione um profissional e um período' });
        setLoadingCash(false);
        return;
      }

      // Buscar os atendimentos do profissional selecionado
      const { data: appointmentsData, error: appointmentsError } = await supabase
        .from('appointments')
        .select(`
          id,
          date,
          time,
          total_value,
          status,
          cash_closing_id,
          professional_id,
          payment_method_id,
          payment_method,
          services,
          services_data,
          products,
          clients (
            id,
            name
          ),
          appointment_services (
            id,
            service_id,
            services (
              id,
              name,
              price,
              commission
            )
          )
        `)
        .eq('professional_id', cashSelectedProfessional)
        .gte('date', cashStartDate)
        .lte('date', cashEndDate)
        .is('cash_closing_id', null)  // Garantir que só traga atendimentos não fechados
        .in('status', ['realizado', 'finalizado', 'concluído'])
        .order('date', { ascending: true });

      if (appointmentsError) {
        console.error('Erro na consulta de atendimentos:', appointmentsError);
        setCashMessage({ type: 'error', text: 'Erro ao buscar atendimentos' });
        setLoadingCash(false);
        return;
      }

      // Se não houver atendimentos, mostrar mensagem e limpar os dados
      if (!appointmentsData || appointmentsData.length === 0) {
        setAppointments([]);
        setEmployeeAdvances([]);
        setCashMessage({ type: 'info', text: 'Nenhum atendimento pendente encontrado para o período selecionado' });
        setLoadingCash(false);
        return;
      }

      // Não precisamos mais filtrar por cash_closing_id pois já fizemos isso na consulta
      const filteredAppointments = appointmentsData;
      
      console.log('Atendimentos sem cash_closing_id:', filteredAppointments.length);
      
      // Se todos os atendimentos do período já tiverem sido fechados
      if (filteredAppointments.length === 0) {
        setAppointments([]);
        setEmployeeAdvances([]);
        setCashMessage({ 
          type: 'info', 
          text: 'Todos os atendimentos deste período já foram processados no fechamento de caixa. Verifique o histórico de caixas fechados.' 
        });
        setLoadingCash(false);
        return;
      }

      // Buscar os métodos de pagamento para obter as taxas
      const { data: paymentMethodsData, error: paymentMethodsError } = await supabase
        .from('payment_methods')
        .select('*');

      if (paymentMethodsError) {
        console.error('Erro ao buscar métodos de pagamento:', paymentMethodsError);
        setCashMessage({ type: 'error', text: 'Erro ao buscar métodos de pagamento' });
        setLoadingCash(false);
        return;
      }

      // Antes de processar atendimentos, carregar todos os serviços do banco para referência
      const { data: servicesData, error: servicesError } = await supabase
        .from('services')
        .select('*');

      if (servicesError) {
        console.error('Erro ao buscar serviços:', servicesError);
        // Não vamos interromper o fluxo, apenas registrar o erro
      }

      // Processar os atendimentos
      const formattedAppointments = [];
      let hasProcessingErrors = false;
      
      for (const appointment of filteredAppointments) {
        try {
          // Obter o método de pagamento
          const paymentMethod = paymentMethodsData?.find(
            (pm: any) => pm.id === appointment.payment_method_id
          );

          // Obter a taxa de pagamento
          let actualPaymentFee = 0;
          let paymentFeePercent = 0;
          
          if (paymentMethod) {
            actualPaymentFee = Number(paymentMethod.fee) / 100;
            paymentFeePercent = Number(paymentMethod.fee);
          }

          // Processar os serviços - primeiro tentar services_data (customizados), depois appointment_services, e finalmente services
          let services: Array<{name: string, commission: number, price: number}> = [];
          let totalServicesValue = 0;
          
          if (appointment.services_data && typeof appointment.services_data === 'object') {
            // Usar serviços customizados do encerramento do atendimento
            services = Object.entries(appointment.services_data).map(([name, data]: [string, any]) => ({
              name: name,
              commission: servicesData?.find((s: any) => s.name === name)?.commission || 0,
              price: data.price || 0
            }));
            // Calcular valor total dos serviços
            totalServicesValue = services.reduce((sum, service) => sum + service.price, 0);
          } else if (appointment.appointment_services && Array.isArray(appointment.appointment_services) && appointment.appointment_services.length > 0) {
            // Usar serviços da tabela de relacionamento appointment_services
            services = appointment.appointment_services.map((as: any) => ({
              name: as.services?.name || 'Serviço não encontrado',
              commission: as.services?.commission || 0,
              price: as.services?.price || 0
            }));
            // Calcular valor total dos serviços
            totalServicesValue = services.reduce((sum, service) => sum + service.price, 0);
          } else if (appointment.services && Array.isArray(appointment.services) && appointment.services.length > 0) {
            // Tentar usar serviços do próprio agendamento
            services = appointment.services.map((serviceName: string) => {
              // Tentar encontrar o serviço no banco de serviços
              const serviceData = servicesData?.find((s: any) => s.name === serviceName) || null;
              return {
                name: serviceName,
                commission: serviceData?.commission || 0,
                price: serviceData?.price || 0
              };
            });
            // Calcular valor total dos serviços
            totalServicesValue = services.reduce((sum, service) => sum + service.price, 0);
          }

          // Calcular a comissão média baseada apenas nos serviços
          const averageCommissionRate = services.length > 0 
            ? services.reduce((sum: number, service: { commission: number }) => sum + service.commission, 0) / services.length 
            : 0;

          // Processar produtos separadamente (mantemos o processamento mas não incluímos no valor total)
          let products: Array<{id: string, name: string, quantity: number, price: number}> = [];
          
          if (appointment.products && Array.isArray(appointment.products) && appointment.products.length > 0) {
            products = appointment.products.map((p: any) => ({
              id: p.id || 'produto-' + Math.random().toString(36).substring(2, 9),
              name: p.name || 'Produto não identificado',
              quantity: p.quantity || 1,
              price: p.price || 0
            }));
          }

          // Obter o cliente (corrigindo erro de tipagem)
          let clientId = '';
          let clientName = 'Cliente não identificado';
          
          try {
            // Acesso direto evitando problemas de tipagem
            const clientData = (appointment as any).clients;
            if (clientData && typeof clientData === 'object') {
              clientId = clientData.id || '';
              clientName = clientData.name || 'Cliente não identificado';
            }
          } catch (clientErr) {
            console.error('Erro ao processar dados do cliente:', clientErr);
            hasProcessingErrors = true;
          }

          formattedAppointments.push({
            id: appointment.id,
            date: appointment.date,
            time: appointment.time || '00:00',
            client: {
              id: clientId,
              name: clientName
            },
            services: services,
            service_names: services.map((s: { name: string }) => s.name),
            total_value: totalServicesValue, // Usar apenas o valor dos serviços
            payment_method: paymentMethod?.name || appointment.payment_method || 'Não especificado',
            payment_method_id: appointment.payment_method_id,
            payment_fee: actualPaymentFee,
            payment_fee_percent: paymentFeePercent,
            commission_rate: averageCommissionRate,
            products: products,
            cash_closing_id: appointment.cash_closing_id
          });
        } catch (err) {
          console.error('Erro ao processar atendimento:', err, appointment);
          hasProcessingErrors = true;
        }
      }

      if (formattedAppointments.length === 0) {
        setCashMessage({ type: 'info', text: 'Nenhum atendimento válido encontrado para o período selecionado' });
        setLoadingCash(false);
        return;
      }

      if (hasProcessingErrors) {
        setCashMessage({ type: 'warning', text: 'Alguns atendimentos podem ter informações incompletas' });
      }

      console.log('Atendimentos formatados:', formattedAppointments);
      
      // Atualizar o estado com os dados formatados
      setAppointments(formattedAppointments);
      
      // Buscar vales do período
      const { data: advancesData, error: advancesError } = await supabase
        .from('employee_advances')
        .select('id, amount, date, cash_closing_id')
        .eq('professional_id', cashSelectedProfessional)
        .gte('date', cashStartDate)
        .lte('date', cashEndDate)
        .is('cash_closing_id', null)
        .order('date', { ascending: true });

      if (advancesError) {
        console.error('Erro ao buscar vales:', advancesError);
        setCashMessage(prev => ({
          type: 'warning',
          text: prev.text ? `${prev.text}. Erro ao buscar vales` : 'Erro ao buscar vales'
        }));
      }

      // Filtrar vales que não foram incluídos em nenhum fechamento de caixa
      const filteredAdvances = (advancesData || []).filter(
        advance => !advance.cash_closing_id || advance.cash_closing_id === null
      );
      
      console.log('Vales não processados:', filteredAdvances.length);
      
      setEmployeeAdvances(filteredAdvances);
      setLoadingCash(false);

    } catch (error) {
      console.error('Erro ao buscar detalhes do caixa:', error);
      setCashMessage({ type: 'error', text: 'Erro ao buscar detalhes do caixa. Por favor, tente novamente.' });
      setAppointments([]);
      setEmployeeAdvances([]);
      setLoadingCash(false);
    }
  }

  // Função para calcular a comissão
  const calcularComissao = (valor: number, taxa: number) => {
    // A taxa é a comissão do profissional
    return valor * (taxa / 100);
  };

  // Calcular o valor total das comissões do profissional
  const calcularTotalComissoes = () => {
    return appointments.reduce((total, appointment) => {
      const comissao = calcularComissao(appointment.total_value, appointment.commission_rate || 0);
      return total + comissao;
    }, 0);
  };

  // Calcular a média ponderada das comissões do profissional
  const calcularMediaComissoes = () => {
    if (!appointments.length) return 0;
    
    const totalValor = appointments.reduce((sum, appointment) => sum + appointment.total_value, 0);
    const totalComissao = calcularTotalComissoes();
    
    return totalValor > 0 ? (totalComissao / totalValor) * 100 : 0;
  };

  // Calcular totais
  const totalEarnings = appointments
    .filter(app => !closedDates.includes(app.date))
    .reduce((sum, appointment) => sum + appointment.total_value, 0);

  const totalPaymentFees = appointments
    .filter(app => !closedDates.includes(app.date))
    .reduce((sum, appointment) => sum + (appointment.total_value * (appointment.payment_fee_percent / 100)), 0);

  // Valor após taxas de pagamento
  const totalAfterPaymentFees = totalEarnings - totalPaymentFees;

  // Parte que fica com o salão (100% - taxa de comissão do profissional)
  const totalSalonShare = appointments
    .filter(app => !closedDates.includes(app.date))
    .reduce((sum, appointment) => {
      const afterFees = appointment.total_value - (appointment.total_value * (appointment.payment_fee_percent / 100));
      const salonShare = afterFees * ((100 - (appointment.commission_rate || 0)) / 100);
      return sum + salonShare;
    }, 0);

  // Parte que fica com o profissional
  const totalProfessionalShare = totalAfterPaymentFees - totalSalonShare;

  const totalAdvances = employeeAdvances
    .filter(advance => selectedAdvances.includes(advance.id))
    .reduce((sum, advance) => sum + advance.amount, 0);

  // Valor líquido do profissional (após descontar vales)
  const netIncome = totalProfessionalShare - totalAdvances;

  const formatCurrency = (value: number): string => {
    return new Intl.NumberFormat('pt-BR', { 
      style: 'currency', 
      currency: 'BRL' 
    }).format(value);
  };

  // Funções para gerenciar taxas de pagamento
  async function fetchPaymentMethods() {
    try {
    setLoadingPaymentMethods(true);
      console.log('Buscando métodos de pagamento...');

      const { data, error } = await supabase
        .from('payment_methods')
        .select('id, name, fee')
        .order('name');

      if (error) {
        console.error('Erro ao buscar métodos:', error);
        throw error;
      }

      console.log('Dados retornados:', data);

      if (data && data.length > 0) {
        const formattedMethods = data.map(method => ({
          id: String(method.id),
          name: String(method.name),
          fee: Number(method.fee)
        }));
        console.log('Métodos formatados:', formattedMethods);
        setPaymentMethods(formattedMethods);
      } else {
        console.log('Nenhum método de pagamento encontrado');
        setPaymentMethods([]);
      }
    } catch (error) {
      console.error('Erro ao buscar métodos de pagamento:', error);
    } finally {
      setLoadingPaymentMethods(false);
    }
  }

  // Efeito para carregar os métodos de pagamento quando o componente montar
  useEffect(() => {
    fetchPaymentMethods();
  }, []);

  // Efeito para recarregar quando a tab mudar
  useEffect(() => {
    if (activeTab === 'metodos') {
      fetchPaymentMethods();
    }
  }, [activeTab]);

  async function handlePaymentMethodSubmit(e: React.FormEvent) {
    e.preventDefault();
    setSavingPaymentMethod(true);
    setPaymentMethodMessage({ type: '', text: '' });

    try {
      const numericFee = parseFloat(newPaymentMethod.fee.replace(/[^\d,]/g, '').replace(',', '.'));
      
      if (editingPaymentMethod) {
        // Atualizar método existente
        const { error } = await supabase
          .from('payment_methods')
          .update({
            name: newPaymentMethod.name,
            fee: numericFee
          })
          .eq('id', editingPaymentMethod.id);

        if (error) throw error;
        setPaymentMethodMessage({ type: 'success', text: 'Método de pagamento atualizado com sucesso!' });
      } else {
        // Criar novo método
        const { error } = await supabase
          .from('payment_methods')
          .insert([{
            name: newPaymentMethod.name,
            fee: numericFee
          }]);

        if (error) throw error;
        setPaymentMethodMessage({ type: 'success', text: 'Método de pagamento criado com sucesso!' });
      }

      // Resetar o formulário e atualizar a lista
      setNewPaymentMethod({ name: '', fee: '0' });
      setEditingPaymentMethod(null);
      fetchPaymentMethods();
    } catch (error) {
      console.error('Erro ao salvar método de pagamento:', error);
      setPaymentMethodMessage({ type: 'error', text: 'Erro ao salvar método de pagamento. Tente novamente.' });
    } finally {
      setSavingPaymentMethod(false);
    }
  }

  function handleEditPaymentMethod(method: PaymentMethod) {
    setEditingPaymentMethod(method);
    setNewPaymentMethod({
      name: method.name,
      fee: method.fee.toString()
    });
  }

  async function handleDeletePaymentMethod(id: string) {
    if (!window.confirm('Tem certeza que deseja excluir este método de pagamento?')) {
      return;
    }

    setPaymentMethodMessage({ type: '', text: '' });

    try {
      const { error } = await supabase
        .from('payment_methods')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      setPaymentMethodMessage({ type: 'success', text: 'Método de pagamento excluído com sucesso!' });
      fetchPaymentMethods();
    } catch (error) {
      console.error('Erro ao excluir método de pagamento:', error);
      setPaymentMethodMessage({ type: 'error', text: 'Erro ao excluir método de pagamento. Tente novamente.' });
    }
  }

  // Função para buscar dados históricos
  async function fetchHistoricalData(startDateStr: string, endDateStr: string) {
    // Verificar se já está carregando ou se é a mesma consulta que a anterior
    if (isLoadingHistoricalData) {
      console.log('Consulta já em andamento, ignorando chamada duplicada');
      return;
    }

    // Verificar se é a mesma consulta que a última
    if (lastFetchRef.current.startDate === startDateStr && 
        lastFetchRef.current.endDate === endDateStr) {
      console.log('Mesmas datas da consulta anterior, ignorando');
      return;
    }

    // Atualizar referência
    lastFetchRef.current = { startDate: startDateStr, endDate: endDateStr };
    
    console.log(`Iniciando consulta de dados históricos: ${startDateStr} até ${endDateStr}`);
    
    try {
      // Marcar como em andamento
      setIsLoadingHistoricalData(true);
      
      // Atualizar o estado para mostrar que está carregando
    setHistoricalData(prev => ({ ...prev, loading: true }));
    
      const { data: appointments, error: appointmentsError } = await supabase
        .from('appointments')
        .select(`
          id,
          date,
          time,
          total_value,
          payment_method,
          payment_method_id,
          status,
          services_data,
          payment_methods (
            id,
            name,
            fee
          ),
          products,
          professional_id,
          professionals (
            id,
            name
          ),
          clients (
            id,
            name
          )
        `)
        .gte('date', startDateStr)
        .lte('date', endDateStr)
        .in('status', ['realizado', 'finalizado', 'concluído'])
        .order('date', { ascending: false });

      if (appointmentsError) throw appointmentsError;

      // Buscar vendas diretas de produtos
      console.log(`Buscando vendas diretas de produtos de ${startDateStr}T00:00:00.000Z até ${endDateStr}T23:59:59.999Z`);
      
      const { data: directSales, error: directSalesError } = await supabase
        .from('appointment_product_sales')
        .select(`
          id,
          created_at,
          client_id,
          status,
          clients (
            id,
            name
          ),
          payment_methods (
            id,
            name,
            fee
          ),
          subtotal,
          fee,
          total
        `)
        .gte('created_at', `${startDateStr}T00:00:00.000Z`)
        .lte('created_at', `${endDateStr}T23:59:59.999Z`)
        .order('created_at', { ascending: false });

      console.log(`Resultado da consulta: ${directSales?.length || 0} vendas encontradas`);
      if (directSalesError) {
        console.error('Erro ao buscar vendas diretas:', directSalesError);
        throw directSalesError;
      }

      // Transformar created_at para date em cada venda após obter os resultados
      if (directSales && directSales.length > 0) {
        directSales.forEach(sale => {
          // Adicionar explicitamente o campo date ao objeto sale
          (sale as any).date = sale.created_at;
        });
      }

      // Buscar os produtos de cada venda
      let directProductsData = [];
      if (directSales && directSales.length > 0) {
        const saleIds = directSales.map(sale => sale.id).filter(Boolean);
        
        // Somente consultar se houver IDs de venda válidos
        if (saleIds.length > 0) {
          console.log(`Buscando produtos para ${saleIds.length} vendas`);
          
        const { data: saleProducts, error: saleProductsError } = await supabase
          .from('product_sales')
          .select(`
            id,
            sale_id,
            product_id,
            quantity,
            unit_price,
            products (
              id,
              name,
              cost_price
            )
          `)
          .in('sale_id', saleIds);

        if (saleProductsError) throw saleProductsError;

        // Adicionar os produtos a suas respectivas vendas
          if (saleProducts && saleProducts.length > 0) {
            console.log(`Encontrados ${saleProducts.length} produtos relacionados às vendas`);
            
          // Agrupar produtos por venda
          const productsBySale = saleProducts.reduce((acc, product) => {
            if (!acc[product.sale_id]) {
              acc[product.sale_id] = [];
            }
            acc[product.sale_id].push({
              id: product.product_id,
              name: product.products?.name || 'Produto sem nome',
              quantity: product.quantity,
              price: product.unit_price,
              cost_price: product.products?.cost_price || 0
            });
            return acc;
          }, {});

          // Adicionar produtos às vendas
          directSales.forEach(sale => {
            sale.products = productsBySale[sale.id] || [];
            });
          } else {
            console.log('Nenhum produto encontrado para as vendas');
            // Garantir que todas as vendas tenham um array vazio de produtos
            directSales.forEach(sale => {
              sale.products = [];
            });
          }
        } else {
          console.log('Nenhum ID de venda válido encontrado, pulando consulta de produtos');
          // Garantir que todas as vendas tenham um array vazio de produtos
          directSales.forEach(sale => {
            sale.products = [];
          });
        }
      }
      
      // Log para depuração
      console.log('Vendas diretas encontradas:', directSales);
      
      // Verificar status das vendas
      if (directSales && directSales.length > 0) {
        console.log('Status das vendas encontradas:');
        directSales.forEach((sale, index) => {
          console.log(`Venda ${index+1}: ID=${sale.id}, Status=${sale.status}, Data=${sale.date}`);
          console.log('Produtos:', sale.products);
          console.log('Cliente:', sale.clients);
          console.log('Método de Pagamento:', sale.payment_methods);
        });
      }

      // Buscar profissionais para os atendimentos apenas se necessário
      const professionalIds = appointments?.map(app => app.professional_id) || [];
      let professionals: { id: string | number; name: string }[] = [];
      
      if (professionalIds.length > 0 && professionals.length === 0) {
        console.log(`Buscando ${professionalIds.length} profissionais`);
        
        const { data: profsData } = await supabase
          .from('professionals')
          .select('id, name')
          .in('id', professionalIds);
          
        professionals = profsData || [];
      } else {
        console.log('Usando profissionais já carregados ou nenhum profissional necessário');
      }
      
      // Buscar métodos de pagamento apenas se necessário
      const paymentMethodIds = appointments?.filter(app => app.payment_method_id).map(app => app.payment_method_id) || [];
      let paymentMethods: any[] = [];
      
      if (paymentMethodIds.length > 0 && paymentMethods.length === 0) {
        console.log(`Buscando ${paymentMethodIds.length} métodos de pagamento`);
        
        const { data: pmData } = await supabase
          .from('payment_methods')
          .select('id, name, fee')
          .in('id', paymentMethodIds);
          
        paymentMethods = pmData || [];
      } else {
        console.log('Usando métodos de pagamento já carregados ou nenhum método necessário');
      }

      // Buscar vales no período apenas se necessário
      console.log(`Consultando vales para o período ${startDateStr} até ${endDateStr}`);
      
      const { data: advances, error: advancesError } = await supabase
        .from('employee_advances')
        .select(`
          id,
          amount,
          date,
          professional_id
        `)
        .gte('date', startDateStr)
        .lte('date', endDateStr)
        .order('date', { ascending: false });

      if (advancesError) throw advancesError;
      
      console.log(`Encontrados ${advances?.length || 0} vales no período`);

      // Processar vendas de produtos de atendimentos
      const appointmentProducts = appointments?.reduce((products: ProductSale[], app) => {
        // Corrigir a forma como obtemos os dados do cliente para produtos de atendimentos
        let clientInfo = { id: '', name: 'Cliente não especificado' };
        
        if (app.clients) {
          // Se clients for um objeto (não array)
          if (!Array.isArray(app.clients) && app.clients.id && app.clients.name) {
            clientInfo = {
              id: String(app.clients.id),
              name: app.clients.name
            };
          } 
          // Se clients for um array com pelo menos um elemento
          else if (Array.isArray(app.clients) && app.clients.length > 0 && app.clients[0].id && app.clients[0].name) {
            clientInfo = {
              id: String(app.clients[0].id),
              name: app.clients[0].name
            };
          }
        }
        
        // Obter a taxa de pagamento
        const paymentFeePercent = app.payment_methods?.fee || 0;
        
        const appProducts = (app.products || []).map((prod: SaleProduct) => {
          const originalPrice = Number(prod.price) || 0;
          // Descontar a taxa do valor do produto
          const priceLessPaymentFee = originalPrice - (originalPrice * (paymentFeePercent / 100));
          
          return {
          id: prod.id,
          name: prod.name || '',
          quantity: Number(prod.quantity) || 0,
            price: priceLessPaymentFee, // Usar o preço já com desconto da taxa
            originalPrice: originalPrice, // Guardar o preço original para referência
          cost_price: Number(prod.cost_price) || 0,
          date: app.date,
          client: clientInfo,
            source: 'appointment' as const,
            payment_fee_percent: paymentFeePercent
          };
        });
        return [...products, ...appProducts];
      }, []) || [];

      // Processar vendas diretas de produtos - usamos any aqui para evitar problemas de tipagem
      const directProductSales = directSales?.reduce((products: ProductSale[], sale: any) => {
        console.log('Processando venda:', sale.id, 'status:', sale.status);
        
        // Verificar se a venda tem status válido para ser contabilizada no relatório
        if (sale.status !== 'completed' && sale.status !== 'finalizado' && sale.status !== 'realizado') {
          console.log(`Venda ${sale.id} ignorada: status "${sale.status}" não é válido para o relatório`);
          return products;
        }
        
        // Processar informações do cliente
        let clientInfo = { id: '', name: 'Cliente não especificado' };
        if (sale.clients) {
          clientInfo = {
            id: String(sale.clients.id || ''),
            name: sale.clients.name || 'Cliente não especificado'
          };
        }
        
        // Verificar se sale.products existe e é válido
        if (!sale.products || !Array.isArray(sale.products)) {
          console.log('Venda sem produtos válidos:', sale.id);
          return products;
        }

        // Obter a taxa de pagamento do método utilizado
        const paymentFeePercent = sale.payment_methods?.fee || 0;

        console.log('Produtos na venda:', sale.products);
        
        const saleProducts = sale.products.map((prod: any) => {
          console.log('Processando produto:', prod);
          const originalPrice = Number(prod.price || prod.unit_price) || 0;
          // Descontar a taxa do valor do produto
          const priceLessPaymentFee = originalPrice - (originalPrice * (paymentFeePercent / 100));
          
          return {
            id: prod.id || '',
            name: prod.name || 'Produto sem nome',
            quantity: Number(prod.quantity) || 0,
            price: priceLessPaymentFee, // Usar o preço já com desconto da taxa
            originalPrice: originalPrice, // Guardar o preço original para referência
            cost_price: Number(prod.cost_price) || 0,
            date: sale.date,
            client: clientInfo,
            source: 'sale' as const,
            payment_fee_percent: paymentFeePercent
          };
        });
        
        console.log('Produtos processados:', saleProducts.length);
        return [...products, ...saleProducts];
      }, []) || [];

      // Combinar produtos de atendimentos e vendas diretas
      const allProductSales = [...appointmentProducts, ...directProductSales];
      console.log('Total de produtos processados:', allProductSales.length);
      console.log('- De atendimentos:', appointmentProducts.length);
      console.log('- De vendas diretas:', directProductSales.length);

      // Processar os dados para o formato correto
      const processedAppointments = appointments?.map(app => {
        // Calcular valor total com base nos serviços finalizados (services_data)
        let totalValue = Number(app.total_value) || 0;
        
        // Se o atendimento tiver dados de serviços finalizados, usar este valor em vez do original
        if (app.services_data && typeof app.services_data === 'object') {
          // Somar os valores dos serviços realmente executados
          const servicesTotal = Object.values(app.services_data).reduce((sum: number, serviceData: any) => {
            return sum + (Number(serviceData.price) || 0);
          }, 0);
          
          // Calcular também o valor dos produtos
          const productsTotal = (app.products || []).reduce((sum: number, prod: any) => 
            sum + ((Number(prod.price) || 0) * (Number(prod.quantity) || 0)), 0);
            
          // Usar o valor calculado dos serviços reais + produtos
          totalValue = servicesTotal + productsTotal;
        }
        
        return {
          id: app.id,
          date: app.date,
          time: app.time,
          total_value: totalValue,
          payment_method: app.payment_methods?.name || app.payment_method || 'Não especificado',
          payment_method_id: app.payment_method_id,
          payment_methods: app.payment_methods ? {
            id: app.payment_methods.id,
            name: app.payment_methods.name,
            fee: Number(app.payment_methods.fee) || 0
          } : undefined,
          products: app.products || [],
          professional: {
            id: String(app.professionals?.id || app.professional_id || ''),
            name: app.professionals?.name || 'Profissional não especificado'
          },
          client: {
            id: String(app.clients?.id || app.client_id || ''),
            name: app.clients?.name || 'Cliente não especificado'
          }
        };
      }) || [];
      
      const processedAdvances = advances?.map(adv => {
        const professional = professionals.find(p => p.id == adv.professional_id);
        
        return {
          id: String(adv.id),
          amount: Number(adv.amount) || 0,
          date: adv.date,
          professional: {
            id: professional ? String(professional.id) : '',
            name: professional ? professional.name : ''
          }
        };
      }) || [];

      // Calcular totais do período
      const totalAppointmentsEarnings = processedAppointments.reduce((sum, app) => sum + app.total_value, 0);

      // Calcular total de vendas diretas
      const totalDirectSalesEarnings = directSales?.reduce((sum: number, sale: any) => {
        // Validar o status da venda
        if (sale.status !== 'completed' && sale.status !== 'finalizado' && sale.status !== 'realizado') {
          return sum;
        }

        // Retornar o subtotal ou total da venda, dependendo de qual estiver disponível
        return sum + (Number(sale.subtotal) || Number(sale.total) || 0);
      }, 0) || 0;

      // Faturamento total = atendimentos + vendas diretas
      const totalEarnings = totalAppointmentsEarnings + totalDirectSalesEarnings;

      console.log('Faturamento de atendimentos:', formatCurrency(totalAppointmentsEarnings));
      console.log('Faturamento de vendas diretas:', formatCurrency(totalDirectSalesEarnings));
      console.log('Faturamento total:', formatCurrency(totalEarnings));

      // Calcular taxas de pagamento
      const totalPaymentFees = processedAppointments.reduce((sum, app) => {
        const fee = app.payment_methods?.fee || 0;
        return sum + (app.total_value * fee / 100);
      }, 0);

      // Adicionar taxas de vendas diretas
      const totalDirectSalesFees = directSales?.reduce((sum: number, sale: any) => {
        // Validar o status da venda
        if (sale.status !== 'completed' && sale.status !== 'finalizado' && sale.status !== 'realizado') {
          return sum;
        }

        return sum + (Number(sale.fee) || 0);
      }, 0) || 0;

      const totalFees = totalPaymentFees + totalDirectSalesFees;

      // Calcular lucro sobre produtos
      const totalProductProfit = allProductSales.reduce((sum, prod) => {
        // Usar o preço líquido (já descontado da taxa) para calcular o lucro
        return sum + ((prod.price - prod.cost_price) * prod.quantity);
      }, 0);

      // Calcular lucro sobre serviços (comissões)
      const totalCommissions = processedAppointments.reduce((sum, app) => {
        // Calcular o total de produtos do atendimento
        const productsTotal = (app.products || []).reduce((pSum: number, prod: any) => 
          pSum + ((Number(prod.price) || 0) * (Number(prod.quantity) || 0)), 0);
        
        // O valor dos serviços é o total do atendimento menos o total de produtos
        const servicesTotal = app.total_value - productsTotal;
        
        // Obter a taxa de pagamento do método utilizado
        const paymentFeePercent = app.payment_methods?.fee || 0;
        
        // Valor da taxa sobre os serviços (proporcional)
        const servicePaymentFee = (servicesTotal * paymentFeePercent) / 100;
        
        // Valor do serviço após descontar a taxa de pagamento
        const serviceAfterFee = servicesTotal - servicePaymentFee;
        
        // Calcular a comissão do salão sobre serviços (50% do valor dos serviços após descontar a taxa)
        // Esta é a parte que fica com o salão após pagar o profissional e as taxas
        return sum + (serviceAfterFee * 0.5);
      }, 0);

      // Calcular total de vales
      const totalAdvances = processedAdvances.reduce((sum, adv) => sum + adv.amount, 0);

      setHistoricalData({
        advances: processedAdvances,
        cashClosings: processedAppointments,
        productSales: allProductSales,
        totalAdvances,
        totalEarnings,
        totalCommissions,
        totalPaymentFees: totalFees, // Atualizar para usar as taxas combinadas
        totalProductProfit,
        loading: false
      });

    } catch (error) {
      console.error('Erro ao buscar dados históricos:', error);
      setHistoricalData(prev => ({ ...prev, loading: false }));
    } finally {
      // Desmarcar como em andamento
      setIsLoadingHistoricalData(false);
    }
  }

  async function deleteProcessedAdvances(advances: EmployeeAdvance[]) {
    try {
      const advanceIds = advances.map(advance => advance.id);
      const { error } = await supabase
        .from('employee_advances')
        .delete()
        .in('id', advanceIds);

      if (error) throw error;
      
      // Atualizar a lista de vales após a exclusão
      fetchVales();
      
    } catch (error) {
      console.error('Erro ao excluir vales processados:', error);
    }
  }

  async function markAdvancesAsProcessed(advances: EmployeeAdvance[], cashClosingId: string) {
    try {
      const advanceIds = advances.map(advance => advance.id);
      const { error } = await supabase
        .from('employee_advances')
        .update({ cash_closing_id: cashClosingId })
        .in('id', advanceIds);

      if (error) throw error;
      
      // Atualizar o estado local dos vales
      setEmployeeAdvances(prevAdvances => 
        prevAdvances.map(advance => 
          advanceIds.includes(advance.id)
            ? { ...advance, cash_closing_id: cashClosingId }
            : advance
        )
      );
      
      // Atualizar a lista de vales após a atualização
      fetchVales();
      
    } catch (error) {
      console.error('Erro ao marcar vales como processados:', error);
    }
  }

  async function handleCloseCash() {
    try {
      if (!window.confirm('Tem certeza que deseja fechar o caixa para este período?')) {
        return;
      }

      setLoadingCash(true);

      // Validar se há atendimentos e valores para fechar
      if (appointments.length === 0 || totalProfessionalShare <= 0) {
        setCashMessage({ type: 'error', text: 'Não há valores pendentes para fechar o caixa' });
        setLoadingCash(false);
        return;
      }

      // Verificar novamente se os atendimentos ainda não foram fechados
      const { data: checkData, error: checkError } = await supabase
        .from('appointments')
        .select('id')
        .in('id', appointments.map(app => app.id))
        .is('cash_closing_id', null);

      if (checkError) {
        console.error('Erro ao verificar atendimentos:', checkError);
        setCashMessage({ type: 'error', text: 'Erro ao verificar atendimentos' });
        setLoadingCash(false);
        return;
      }

      if (!checkData || checkData.length !== appointments.length) {
        setCashMessage({ 
          type: 'error', 
          text: 'Alguns atendimentos já foram fechados em outro caixa. Por favor, atualize a página.' 
        });
        setLoadingCash(false);
        return;
      }

      // Calcular valores totais
      const totalEarningValue = appointments
        .filter(app => !closedDates.includes(app.date))
        .reduce((sum, app) => sum + app.total_value, 0);

      const totalPaymentFeesValue = appointments
        .filter(app => !closedDates.includes(app.date))
        .reduce((sum, app) => sum + (app.total_value * (app.payment_fee_percent / 100)), 0);

      // Valor após taxas de pagamento
      const totalAfterFeesValue = totalEarningValue - totalPaymentFeesValue;

      // Parte que fica com o salão
      const totalSalonShareValue = appointments
        .filter(app => !closedDates.includes(app.date))
        .reduce((sum, app) => {
          const afterFees = app.total_value - (app.total_value * (app.payment_fee_percent / 100));
          const salonShare = afterFees * ((100 - (app.commission_rate || 0)) / 100);
          return sum + salonShare;
        }, 0);

      // Parte que fica com o profissional
      const totalProfessionalShareValue = totalAfterFeesValue - totalSalonShareValue;

      const totalAdvancesValue = employeeAdvances
        .filter(adv => selectedAdvances.includes(adv.id))
        .reduce((sum, adv) => sum + adv.amount, 0);

      const netIncomeValue = totalProfessionalShareValue - totalAdvancesValue;

      // Criar registro de fechamento de caixa
      const { data: cashClosing, error: cashClosingError } = await supabase
        .from('cash_closings')
        .insert({
          professional_id: cashSelectedProfessional,
          date: format(new Date(), 'yyyy-MM-dd'),
          total_earnings: totalEarningValue,
          total_payment_fees: totalPaymentFeesValue,
          total_commissions: totalSalonShareValue,
          total_advances: totalAdvancesValue,
          net_income: netIncomeValue,
          period_start: cashStartDate,
          period_end: cashEndDate
        })
        .select()
        .single();

      if (cashClosingError) {
        console.error('Erro ao criar fechamento de caixa:', cashClosingError);
        setCashMessage({ type: 'error', text: 'Erro ao fechar o caixa' });
        setLoadingCash(false);
        return;
      }

      // Atualizar os atendimentos com o ID do fechamento de caixa
      const appointmentIds = appointments
        .filter(app => !closedDates.includes(app.date))
        .map(app => app.id);

      const { error: updateError } = await supabase
        .from('appointments')
        .update({ cash_closing_id: cashClosing.id })
        .in('id', appointmentIds);

      if (updateError) {
        console.error('Erro ao atualizar atendimentos:', updateError);
        setCashMessage({ type: 'error', text: 'Erro ao atualizar atendimentos' });
        setLoadingCash(false);
        return;
      }

      // Atualizar o estado local dos atendimentos
      setAppointments(prevAppointments => 
        prevAppointments.map(app => 
          appointmentIds.includes(app.id) 
            ? { ...app, cash_closing_id: cashClosing.id }
            : app
        )
      );

      // Excluir vales selecionados, se houverem
      if (selectedAdvances.length > 0) {
        await markAdvancesAsProcessed(
          employeeAdvances.filter(adv => selectedAdvances.includes(adv.id)),
          cashClosing.id
        );
      }

      setCashMessage({ type: 'success', text: 'Caixa fechado com sucesso!' });
      
      // Atualizar dados
      fetchCashDetails();
      fetchVales();

      // Atualizar o histórico de fechamentos de caixa
      fetchClosedCashHistory(cashSelectedProfessional);
    } catch (error) {
      console.error('Erro ao fechar caixa:', error);
      setCashMessage({ type: 'error', text: 'Erro ao fechar o caixa' });
      setLoadingCash(false);
    }
  }

  async function fetchClosedCashHistory(professionalId: string) {
    setLoadingClosedCash(true);
    console.log('Buscando histórico de caixas para profissional:', professionalId);
    
    try {
      // Buscar todos os fechamentos do profissional, ordenados por data decrescente
      const { data, error } = await supabase
        .from('cash_closings')
        .select(`
          *,
          professional:professionals(name)
        `)
        .eq('professional_id', professionalId)
        .order('date', { ascending: false });

      if (error) {
        console.error('Erro ao buscar histórico:', error);
        setCashMessage({ type: 'error', text: 'Erro ao buscar histórico de caixas' });
        throw error;
      }

      // Processar os dados recebidos
      const processedData = (data || []).map(item => ({
        id: item.id,
        date: item.date,
        professional_id: item.professional_id,
        total_earnings: Number(item.total_earnings) || 0,
        total_payment_fees: Number(item.total_payment_fees) || 0,
        total_commissions: Number(item.total_commissions) || 0,
        total_advances: Number(item.total_advances) || 0,
        net_income: Number(item.net_income) || 0,
        period_start: item.period_start,
        period_end: item.period_end,
        professional: {
          name: item.professional?.name || 'Profissional'
        }
      }));

      setClosedCashHistory(processedData);
    } catch (error) {
      console.error('Erro ao buscar histórico de caixa:', error);
      setCashMessage({ type: 'error', text: 'Erro ao buscar histórico de caixas' });
    } finally {
      setLoadingClosedCash(false);
    }
  }

  // Função para verificar datas já fechadas
  async function fetchClosedDates(professionalId: string, startDate: string, endDate: string) {
    try {
      const { data, error } = await supabase
        .from('cash_closings')
        .select('period_start, period_end')
        .eq('professional_id', professionalId)
        .gte('period_start', startDate)
        .lte('period_end', endDate);

      if (error) throw error;

      // Criar array com todas as datas fechadas
      const allClosedDates = data?.flatMap(period => {
        const dates = [];
        let currentDate = new Date(period.period_start);
        const endDate = new Date(period.period_end);
        while (currentDate <= endDate) {
          dates.push(format(currentDate, 'yyyy-MM-dd'));
          currentDate.setDate(currentDate.getDate() + 1);
        }
        return dates;
      }) || [];

      setClosedDates(allClosedDates);
    } catch (error) {
      console.error('Erro ao buscar datas fechadas:', error);
    }
  }

  // Adicionar a seção de exibição de vendas de produtos
  const renderProductSales = () => {
    if (historicalData.loading) {
      return (
        <div className="animate-pulse space-y-4">
          {[1, 2, 3].map(i => (
            <div key={i} className="bg-gray-100 h-16 rounded-lg"></div>
          ))}
        </div>
      );
    }

    if (historicalData.productSales.length === 0) {
      return (
        <div className="text-center py-8 text-gray-500">
          Nenhuma venda de produto encontrada no período selecionado
        </div>
      );
    }

    return (
      <div className="space-y-4">
        {historicalData.productSales.map((sale, index) => (
          <div key={`${sale.id}-${index}`} className="bg-white rounded-lg shadow p-4 border border-gray-200">
            <div className="flex justify-between items-start">
              <div>
                <div className="flex items-center gap-2">
                  <h4 className="font-medium text-gray-900">{sale.name}</h4>
                  <span className={`px-2 py-0.5 text-xs rounded-full ${
                    sale.source === 'appointment' 
                      ? 'bg-blue-100 text-blue-800' 
                      : 'bg-emerald-100 text-emerald-800'
                  }`}>
                    {sale.source === 'appointment' ? 'Atendimento' : 'Venda Direta'}
                  </span>
                </div>
                <p className="text-sm text-gray-500 mt-1">
                  {format(parseISO(sale.date), "dd/MM/yyyy")}
                  {sale.client && ` • Cliente: ${sale.client.name}`}
                </p>
              </div>
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">
                  {sale.quantity}x {formatCurrency(sale.price)}
                </p>
                {sale.originalPrice && sale.originalPrice !== sale.price && (
                  <p className="text-xs text-gray-500">
                    Valor bruto: {formatCurrency(sale.originalPrice * sale.quantity)}
                    {sale.payment_fee_percent ? ` (-${sale.payment_fee_percent}%)` : ''}
                  </p>
                )}
                <p className="text-sm text-gray-600">
                  Total líquido: {formatCurrency(sale.price * sale.quantity)}
                </p>
                <p className="text-sm text-green-600 font-medium">
                  Lucro: {formatCurrency((sale.price - sale.cost_price) * sale.quantity)}
                </p>
              </div>
            </div>
            <div className="mt-2 pt-2 border-t border-gray-100">
              <div className="flex justify-between text-xs text-gray-500">
                <div>
                  <span>Custo: {formatCurrency(sale.cost_price)} • </span>
                  <span>Margem: {((sale.price - sale.cost_price) / sale.price * 100).toFixed(0)}%</span>
                </div>
                <div className="flex items-center gap-1">
                  <span>ID: {sale.id.substring(0, 8)}</span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  // Manipuladores de cliques nos botões com memoização
  const handlePeriodSelection = useCallback((period: string) => {
    setSelectedPeriod(period);
    const today = new Date();
    let start = new Date();
    let end = new Date();

    switch (period) {
      case 'today':
        start = startOfDay(today);
        end = endOfDay(today);
        break;
      case 'week':
        start = subDays(today, 7);
        end = endOfDay(today);
        break;
      case 'month':
        start = subDays(today, 30);
        end = endOfDay(today);
        break;
      case 'year':
        start = subDays(today, 365);
        end = endOfDay(today);
        break;
      default:
        break;
    }

    setStartDate(start);
    setEndDate(end);
  }, []);

  // Inicializar e definir período
  useEffect(() => {
    fetchProfessionals();
    fetchVales();
    fetchPaymentMethods();
    
    const today = new Date();
    
    // Definir datas iniciais para hoje
    const initialStartDate = format(startOfDay(today), 'yyyy-MM-dd');
    const initialEndDate = format(endOfDay(today), 'yyyy-MM-dd');
    
    // Buscar dados históricos automaticamente ao iniciar
    fetchHistoricalData(initialStartDate, initialEndDate);
  }, []);

  const renderResumoGeral = () => {
    // Calcular os totais bruto e líquido dos produtos vendidos
    const totalOriginalValue = historicalData.productSales.reduce((sum, product) => {
      const originalPrice = product.originalPrice || product.price;
      return sum + (Number(originalPrice) * Number(product.quantity));
    }, 0);
    
    const totalNetValue = historicalData.productSales.reduce((sum, product) => {
      return sum + (Number(product.price) * Number(product.quantity));
    }, 0);
    
    const totalPaymentFeeOnProducts = totalOriginalValue - totalNetValue;

    return (
      <div className="space-y-6">
        <div className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
          <div className="p-4 border-b border-gray-100 bg-gray-50">
            <h3 className="font-medium text-gray-800">Resumo do Período</h3>
          </div>
          
          {/* Layout responsivo para o resumo financeiro */}
          <div className="p-4 divide-y divide-gray-100">
            {/* Versão desktop */}
            <div className="hidden md:block">
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Total de Atendimentos Finalizados</span>
                <span className="text-sm text-gray-900 text-right font-medium">{historicalData.cashClosings.length}</span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Total de Produtos Vendidos</span>
                <span className="text-sm text-gray-900 text-right font-medium">{historicalData.productSales.length}</span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Produtos em Atendimentos</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {historicalData.productSales.filter(p => p.source === 'appointment').length}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Produtos em Vendas Diretas</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {historicalData.productSales.filter(p => p.source === 'sale').length}
                </span>
              </div>

              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Faturamento - Atendimentos</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0))}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Faturamento - Produtos (Valor Bruto)</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {formatCurrency(totalOriginalValue)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Taxas sobre Produtos</span>
                <span className="text-sm text-red-600 text-right font-medium">
                  - {formatCurrency(totalPaymentFeeOnProducts)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Faturamento - Produtos (Valor Líquido)</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {formatCurrency(totalNetValue)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Faturamento Total (Bruto)</span>
                <span className="text-sm text-gray-900 text-right font-semibold">
                  {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalOriginalValue)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Faturamento Total (Líquido)</span>
                <span className="text-sm text-gray-900 text-right font-semibold">
                  {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Lucro sobre Atendimentos (Comissões)</span>
                <span className="text-sm text-emerald-600 text-right font-medium">
                  {formatCurrency(historicalData.totalCommissions)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3">
                <span className="text-sm text-gray-500">Lucro sobre Produtos</span>
                <span className="text-sm text-emerald-600 text-right font-medium">
                  {formatCurrency(historicalData.totalProductProfit)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 py-3 border-t border-gray-200">
                <span className="text-sm font-medium text-gray-700">Lucro Total</span>
                <span className="text-base text-emerald-600 text-right font-bold">
                  {formatCurrency(historicalData.totalCommissions + historicalData.totalProductProfit)}
                </span>
              </div>
              
              <div className="grid grid-cols-2 pt-3">
                <span className="text-sm text-gray-500">Margem de Lucro</span>
                <span className="text-sm text-gray-900 text-right font-medium">
                  {historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue > 0 
                    ? (((historicalData.totalCommissions + historicalData.totalProductProfit) / 
                        (historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue)) * 100).toFixed(2)
                    : '0.00'}%
                </span>
              </div>
            </div>
            
            {/* Versão mobile com cartões agrupados */}
            <div className="md:hidden space-y-4">
              {/* Cartão de volume */}
              <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <h4 className="text-sm font-medium text-gray-700 mb-3 pb-2 border-b border-gray-100">Volume de Atendimentos e Produtos</h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Atendimentos</span>
                    <span className="text-sm font-medium">{historicalData.cashClosings.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Produtos Vendidos</span>
                    <span className="text-sm font-medium">{historicalData.productSales.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Em Atendimentos</span>
                    <span className="text-sm">{historicalData.productSales.filter(p => p.source === 'appointment').length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Em Vendas Diretas</span>
                    <span className="text-sm">{historicalData.productSales.filter(p => p.source === 'sale').length}</span>
                  </div>
                </div>
              </div>
              
              {/* Cartão de faturamento */}
              <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <h4 className="text-sm font-medium text-gray-700 mb-3 pb-2 border-b border-gray-100">Faturamento</h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Atendimentos</span>
                    <span className="text-sm font-medium">
                      {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0))}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Produtos (Bruto)</span>
                    <span className="text-sm font-medium">{formatCurrency(totalOriginalValue)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Taxas sobre Produtos</span>
                    <span className="text-sm text-red-600">- {formatCurrency(totalPaymentFeeOnProducts)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Produtos (Líquido)</span>
                    <span className="text-sm font-medium">{formatCurrency(totalNetValue)}</span>
                  </div>
                  <div className="flex justify-between pt-2 border-t border-gray-100">
                    <span className="text-sm font-medium text-gray-700">Total Bruto</span>
                    <span className="text-sm font-semibold">
                      {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalOriginalValue)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm font-medium text-gray-700">Total Líquido</span>
                    <span className="text-sm font-semibold">
                      {formatCurrency(historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue)}
                    </span>
                  </div>
                </div>
              </div>
              
              {/* Cartão de lucro */}
              <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <h4 className="text-sm font-medium text-gray-700 mb-3 pb-2 border-b border-gray-100">Lucro</h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Comissões (Atendimentos)</span>
                    <span className="text-sm text-emerald-600 font-medium">
                      {formatCurrency(historicalData.totalCommissions)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Lucro sobre Produtos</span>
                    <span className="text-sm text-emerald-600 font-medium">
                      {formatCurrency(historicalData.totalProductProfit)}
                    </span>
                  </div>
                  <div className="flex justify-between pt-2 border-t border-gray-100">
                    <span className="text-sm font-medium text-gray-700">Lucro Total</span>
                    <span className="text-base text-emerald-600 font-bold">
                      {formatCurrency(historicalData.totalCommissions + historicalData.totalProductProfit)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Margem de Lucro</span>
                    <span className="text-sm font-medium">
                      {historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue > 0 
                        ? (((historicalData.totalCommissions + historicalData.totalProductProfit) / 
                            (historicalData.cashClosings.reduce((sum, app) => sum + app.total_value, 0) + totalNetValue)) * 100).toFixed(2)
                        : '0.00'}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="flex flex-col min-h-full bg-gray-50">
      {/* Aplicar estilos globais para o DatePicker */}
      <style>{datePickerStyle}</style>
      
      {/* Adicionando animações para o menu dropdown */}
      <style>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: scale(0.92); }
          to { opacity: 1; transform: scale(1); }
        }
        
        @keyframes slideIn {
          0% { transform: translateY(-8px); opacity: 0; }
          100% { transform: translateY(0); opacity: 1; }
        }
        
        .animate-fadeIn {
          animation: fadeIn 0.2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        .animate-slideIn {
          animation: slideIn 0.18s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        .animate-slideIn-1 { animation-delay: 0s; }
        .animate-slideIn-2 { animation-delay: 0.03s; }
        .animate-slideIn-3 { animation-delay: 0.06s; }
        .animate-slideIn-4 { animation-delay: 0.09s; }
        
        /* Sombra suave apenas para os botões */
        .btn-shadow {
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        }
        
        /* Transição suave para os botões */
        .menu-transition {
          transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
        }
      `}</style>
      
      <div className="py-6 px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col space-y-4">
          <div className="flex justify-between items-center">
            {/* Título removido conforme solicitado */}
          
            {/* Ícones para dispositivos móveis no canto superior direito - redesenhados */}
            <div className="flex md:hidden fixed top-3 right-3 z-50">
              {!showMobileMenu ? (
                <div className="flex justify-end">
                  <button
                    onClick={() => setShowMobileMenu(true)}
                    className="p-3 rounded-full btn-shadow transition-all duration-200 bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:shadow-lg menu-transition"
                    title="Menu"
                  >
                    {activeTab === 'resumo' && <Receipt className="h-5 w-5" />}
                    {activeTab === 'taxas' && <CreditCard className="h-5 w-5" />}
                    {activeTab === 'caixa' && <DollarSign className="h-5 w-5" />}
                    {activeTab === 'historico' && <History className="h-5 w-5" />}
                  </button>
                </div>
              ) : (
                <div className="flex flex-col gap-2">
                  <button
                    onClick={() => {
                      setActiveTab('resumo');
                      requestAnimationFrame(() => {
                        setTimeout(() => setShowMobileMenu(false), 40);
                      });
                    }}
                    className={`p-3 rounded-full btn-shadow transition-all duration-150 animate-slideIn animate-slideIn-1 menu-transition ${
                      activeTab === 'resumo'
                        ? 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white'
                        : 'bg-white/90 backdrop-blur-md text-indigo-500'
                    }`}
                    title="Vales"
                  >
                    <Receipt className="h-5 w-5" />
                  </button>
                  
                  <button
                    onClick={() => {
                      setActiveTab('taxas');
                      requestAnimationFrame(() => {
                        setTimeout(() => setShowMobileMenu(false), 40);
                      });
                    }}
                    className={`p-3 rounded-full btn-shadow transition-all duration-150 animate-slideIn animate-slideIn-2 menu-transition ${
                      activeTab === 'taxas'
                        ? 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white'
                        : 'bg-white/90 backdrop-blur-md text-indigo-500'
                    }`}
                    title="Taxas de Pagamento"
                  >
                    <CreditCard className="h-5 w-5" />
                  </button>
                  
                  <button
                    onClick={() => {
                      setActiveTab('caixa');
                      requestAnimationFrame(() => {
                        setTimeout(() => setShowMobileMenu(false), 40);
                      });
                    }}
                    className={`p-3 rounded-full btn-shadow transition-all duration-150 animate-slideIn animate-slideIn-3 menu-transition ${
                      activeTab === 'caixa'
                        ? 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white'
                        : 'bg-white/90 backdrop-blur-md text-indigo-500'
                    }`}
                    title="Caixa"
                  >
                    <DollarSign className="h-5 w-5" />
                  </button>
                  
                  <button
                    onClick={() => {
                      setActiveTab('historico');
                      requestAnimationFrame(() => {
                        setTimeout(() => setShowMobileMenu(false), 40);
                      });
                    }}
                    className={`p-3 rounded-full btn-shadow transition-all duration-150 animate-slideIn animate-slideIn-4 menu-transition ${
                      activeTab === 'historico'
                        ? 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white'
                        : 'bg-white/90 backdrop-blur-md text-indigo-500'
                    }`}
                    title="Histórico"
                  >
                    <History className="h-5 w-5" />
                  </button>
                </div>
              )}
            </div>
          </div>
          
          {/* Tabs de navegação responsivas com ícones - apenas para desktop */}
          <nav className="hidden md:grid md:grid-cols-2 sm:flex gap-3">
            <button
              onClick={() => setActiveTab('resumo')}
              className={`flex items-center justify-center sm:justify-start px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                activeTab === 'resumo'
                  ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              <Receipt className="h-5 w-5 sm:mr-2" />
              <span className="hidden sm:inline">Vales</span>
            </button>
            <button
              onClick={() => setActiveTab('taxas')}
              className={`flex items-center justify-center sm:justify-start px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                activeTab === 'taxas' 
                  ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              <CreditCard className="h-5 w-5 sm:mr-2" />
              <span className="hidden sm:inline">Taxas de Pagamento</span>
            </button>
            <button
              onClick={() => setActiveTab('caixa')}
              className={`flex items-center justify-center sm:justify-start px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                activeTab === 'caixa' 
                  ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              <DollarSign className="h-5 w-5 sm:mr-2" />
              <span className="hidden sm:inline">Caixa</span>
            </button>
            <button
              onClick={() => setActiveTab('historico')}
              className={`flex items-center justify-center sm:justify-start px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                activeTab === 'historico' 
                  ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              <History className="h-5 w-5 sm:mr-2" />
              <span className="hidden sm:inline">Histórico</span>
            </button>
          </nav>
        </div>
        
        {/* Menu flutuante de ações rápidas - REMOVIDO conforme solicitação */}
        {/* Não exibindo os botões de Novo Agendamento e Venda de Produtos na seção financeira */}
        
        {/* Seção de Registro de Vales */}
        {activeTab === 'resumo' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex flex-wrap justify-between items-center mb-6 gap-4">
                <h3 className="text-lg font-medium text-gray-900 flex items-center">
                  <Receipt className="h-5 w-5 mr-2 text-indigo-500" />
                  Vales Registrados
                </h3>
            <button
                  onClick={() => setShowNewValeModal(true)}
                  className="inline-flex items-center px-4 py-2.5 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Registrar Vale
            </button>
        </div>
        
              {/* Lista de vales - versão desktop */}
              <div className="hidden md:block overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
                <table className="min-w-full divide-y divide-gray-300">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">
                        Data
                      </th>
                      <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                        Profissional
                      </th>
                      <th scope="col" className="px-3 py-3.5 text-right text-sm font-semibold text-gray-900">
                        Valor
                      </th>
                      <th scope="col" className="relative py-3.5 pl-3 pr-4 sm:pr-6">
                        <span className="sr-only">Ações</span>
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200 bg-white">
                    {vales.map((vale) => (
                      <tr key={vale.id}>
                        <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm text-gray-500 sm:pl-6">
                          {format(parseISO(vale.date), 'dd/MM/yyyy')}
                        </td>
                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-900">
                          {vale.professional?.name || 'Profissional não especificado'}
                        </td>
                        <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-900 text-right">
                          {formatCurrency(Number(vale.amount))}
                        </td>
                        <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                          <button
                            onClick={() => handleEditVale(vale.id)}
                            className="text-indigo-600 hover:text-indigo-900 mr-4"
                          >
                            Editar
                          </button>
                          <button
                            onClick={() => handleDeleteVale(vale.id)}
                            className="text-red-600 hover:text-red-900"
                          >
                            Excluir
                          </button>
                        </td>
                      </tr>
                    ))}
                    {vales.length === 0 && (
                      <tr>
                        <td colSpan={4} className="text-center py-4 text-gray-500">
                          Nenhum vale registrado
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
                </div>
              
              {/* Lista de vales - versão mobile (cards) */}
              <div className="md:hidden">
                {vales.length === 0 ? (
                  <div className="text-center py-8 px-4 text-gray-500 bg-gray-50 rounded-lg border border-gray-200">
                    <div className="flex flex-col items-center">
                      <Receipt className="h-10 w-10 text-gray-400 mb-2" />
                      <p className="text-sm font-medium">Nenhum vale registrado</p>
                      <p className="text-xs text-gray-400 mt-1">Clique em "Registrar Vale" para adicionar um novo vale</p>
                    </div>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 gap-4">
                    {vales.map((vale) => (
                      <div key={vale.id} className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                        <div className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center">
                              <Calendar className="h-5 w-5 text-indigo-500 mr-2" />
                              <span className="text-sm font-medium">{format(parseISO(vale.date), 'dd/MM/yyyy')}</span>
                            </div>
                            <div className="text-sm font-semibold text-indigo-700 bg-indigo-50 px-2.5 py-1 rounded-full">
                              {formatCurrency(Number(vale.amount))}
                            </div>
                          </div>
                          
                          <div className="flex items-center mb-4">
                            <User className="h-5 w-5 text-gray-400 mr-2" />
                            <span className="text-sm text-gray-700">
                              {vale.professional?.name || 'Profissional não especificado'}
                            </span>
                          </div>
                          
                          <div className="flex border-t border-gray-100 pt-3">
                            <button
                              onClick={() => handleEditVale(vale.id)}
                              className="flex-1 text-xs font-medium text-indigo-600 py-2 flex items-center justify-center"
                            >
                              <Edit className="h-3.5 w-3.5 mr-1" />
                              Editar
                            </button>
                            <div className="w-px bg-gray-100"></div>
                            <button
                              onClick={() => handleDeleteVale(vale.id)}
                              className="flex-1 text-xs font-medium text-red-600 py-2 flex items-center justify-center"
                            >
                              <Trash2 className="h-3.5 w-3.5 mr-1" />
                              Excluir
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                </div>
              </div>

            {/* Modal de novo vale */}
            {showNewValeModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                {/* Versão mobile (mais compacta) */}
                <div className="md:hidden bg-white rounded-xl overflow-hidden max-w-md w-full shadow-xl">
                  {/* Cabeçalho com cor mais suave */}
                  <div className="p-3 bg-indigo-500 bg-opacity-90">
                    <div className="flex justify-between items-center">
                      <h3 className="text-base font-medium text-white flex items-center">
                        <Receipt className="h-4 w-4 mr-1.5" />
                        {editingVale ? 'Editar Vale' : 'Novo Vale'}
                    </h3>
                    <button
                      onClick={resetForm}
                        className="text-white hover:text-gray-200 transition-colors bg-white bg-opacity-20 rounded-full p-1"
                    >
                        <X className="h-4 w-4" />
                    </button>
                    </div>
                      </div>

                  <form onSubmit={handleSubmit} className="p-4">
                    <div className="space-y-3">
                    <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                          <User className="h-3.5 w-3.5 mr-1 text-indigo-400" />
                        Profissional
                    </label>
                        {/* Select estilizado sem setas bugadas */}
                        <div className="relative">
                    <select
                      value={selectedProfessional}
                      onChange={(e) => setSelectedProfessional(e.target.value)}
                            className="appearance-none block w-full rounded-lg border border-gray-300 bg-white px-3 py-2 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 shadow-sm text-sm"
                            style={{ WebkitAppearance: "none" }}
                    >
                      <option value="">Selecione um profissional</option>
                        {professionals.map((prof) => (
                          <option key={prof.id} value={prof.id}>
                            {prof.name}
                        </option>
                      ))}
                    </select>
                          <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 bg-indigo-500 bg-opacity-75 text-white rounded-r-lg h-full">
                            <ChevronDown className="h-3.5 w-3.5" />
                          </div>
                        </div>
                  </div>

                    <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                          <DollarSign className="h-3.5 w-3.5 mr-1 text-indigo-400" />
                        Valor
                    </label>
                        <div className="relative rounded-lg shadow-sm">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span className="text-gray-500 text-xs">R$</span>
                          </div>
                        <input
                          type="number"
                            inputMode="decimal"
                            pattern="[0-9]*"
                          value={valeAmount}
                          onChange={(e) => setValeAmount(e.target.value)}
                            className="block w-full pl-9 pr-3 py-2 rounded-lg border-gray-300 border focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                          placeholder="0.00"
                          step="0.01"
                      />
                    </div>
                  </div>

                    <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                          <Calendar className="h-3.5 w-3.5 mr-1 text-indigo-400" />
                        Data
                    </label>
                    <input
                      type="date"
                          value={valeDate}
                          onChange={(e) => setValeDate(e.target.value)}
                          className="block w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 shadow-sm text-sm"
                    />
                  </div>
                </div>

                    <div className="mt-4 grid grid-cols-2 gap-2">
                    <button
                      type="button"
                        onClick={resetForm}
                        className="flex justify-center items-center px-3 py-2 border border-gray-300 text-gray-700 text-xs font-medium rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-indigo-500 transition-all duration-300"
                    >
                        <X className="h-3.5 w-3.5 mr-1" />
                      Cancelar
                    </button>
                      
                  <button
                    type="submit"
                        className="flex justify-center items-center px-3 py-2 bg-indigo-500 text-white text-xs font-medium rounded-lg shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-1 focus:ring-indigo-500 transition-all duration-300"
                      >
                        <Save className="h-3.5 w-3.5 mr-1" />
                        {editingVale ? 'Atualizar' : 'Salvar'}
                      </button>
                    </div>
                  </form>
                </div>
                
                {/* Versão desktop (compacta) */}
                <div className="hidden md:block bg-white rounded-lg overflow-hidden shadow-xl max-w-md w-full">
                  <div className="bg-indigo-500 bg-opacity-90 p-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-medium text-white flex items-center">
                        <Receipt className="h-5 w-5 mr-2" />
                        {editingVale ? 'Editar Vale' : 'Registrar Vale'}
                      </h3>
                      <button
                        onClick={resetForm}
                        className="text-white hover:text-gray-200 bg-white bg-opacity-20 rounded-full p-1.5"
                      >
                        <X className="h-5 w-5" />
                      </button>
                    </div>
                  </div>

                  <form onSubmit={handleSubmit} className="p-4 space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Profissional
                      </label>
                      <div className="relative">
                        <select
                          value={selectedProfessional}
                          onChange={(e) => setSelectedProfessional(e.target.value)}
                          className="appearance-none block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          style={{ WebkitAppearance: "none" }}
                        >
                          <option value="">Selecione um profissional</option>
                          {professionals.map((prof) => (
                            <option key={prof.id} value={prof.id}>
                              {prof.name}
                            </option>
                          ))}
                        </select>
                        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 bg-indigo-500 bg-opacity-75 text-white rounded-r-md h-full">
                          <ChevronDown className="h-4 w-4" />
                        </div>
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Valor
                      </label>
                      <div className="relative rounded-md shadow-sm">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <span className="text-gray-500 sm:text-sm">R$</span>
                        </div>
                        <input
                          type="number"
                          inputMode="decimal"
                          pattern="[0-9]*"
                          value={valeAmount}
                          onChange={(e) => setValeAmount(e.target.value)}
                          className="block w-full pl-10 pr-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                          placeholder="0.00"
                          step="0.01"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Data
                      </label>
                      <input
                        type="date"
                        value={valeDate}
                        onChange={(e) => setValeDate(e.target.value)}
                        className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      />
                    </div>

                    <div className="flex justify-end space-x-3 pt-3">
                      <button
                        type="button"
                        onClick={resetForm}
                        className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-indigo-500"
                      >
                        Cancelar
                      </button>
                      <button
                        type="submit"
                        className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-500 hover:bg-indigo-600 focus:outline-none focus:ring-1 focus:ring-indigo-500"
                      >
                        {editingVale ? 'Atualizar' : 'Registrar'}
                  </button>
                </div>
              </form>
                  </div>
                  </div>
                )}
          </div>
        )}

        {/* Seção de Taxas de Pagamento */}
        {activeTab === 'taxas' && (
          <div className="max-w-3xl mx-auto">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-100 bg-gray-50">
                <div className="flex items-center space-x-3">
                  <CreditCard className="h-5 w-5 text-indigo-500" />
                  <h2 className="text-lg font-medium text-gray-900">Taxas de Pagamento</h2>
                </div>
              </div>

              <form onSubmit={handlePaymentMethodSubmit} className="p-6 space-y-6">
                <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                  <div className="col-span-2 sm:col-span-1">
                    <label htmlFor="methodName" className="block text-sm font-medium text-gray-700">
                      <div className="flex items-center space-x-2">
                        <CreditCard className="h-4 w-4 text-gray-400" />
                        <span>Nome do Método</span>
                      </div>
                    </label>
                    <input
                      type="text"
                      id="methodName"
                      value={newPaymentMethod.name}
                      onChange={(e) => setNewPaymentMethod({...newPaymentMethod, name: e.target.value})}
                      required
                      placeholder="Ex: Cartão de Crédito"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    />
                  </div>

                  <div className="col-span-2 sm:col-span-1">
                    <label htmlFor="methodFee" className="block text-sm font-medium text-gray-700">
                      <div className="flex items-center space-x-2">
                        <Percent className="h-4 w-4 text-gray-400" />
                        <span>Taxa (%)</span>
                      </div>
                    </label>
                    <div className="mt-1">
                      <NumericFormat
                        id="methodFee"
                        value={newPaymentMethod.fee}
                        onValueChange={(values) => {
                          let value = values.value;
                          // Si el valor tiene más de 2 dígitos y no tiene coma, insertamos la coma
                          if (value.length > 2 && !value.includes(',')) {
                            value = value.slice(0, -2) + ',' + value.slice(-2);
                          }
                          setNewPaymentMethod({...newPaymentMethod, fee: value});
                        }}
                        decimalScale={2}
                        fixedDecimalScale={false}
                        allowLeadingZeros={false}
                        decimalSeparator=","
                        suffix="%"
                        allowNegative={false}
                        required
                        placeholder="0%"
                        className="block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      />
                    </div>
                  </div>
                </div>

                {paymentMethodMessage.text && (
                  <div 
                    className={`rounded-lg p-4 ${
                      paymentMethodMessage.type === 'success' 
                        ? 'bg-green-50 text-green-700 border border-green-200' 
                        : 'bg-red-50 text-red-700 border border-red-200'
                    } transition-opacity duration-300`}
                  >
                    <p className="text-sm font-medium">{paymentMethodMessage.text}</p>
                  </div>
                )}

                <div className="flex justify-end pt-4">
                  {editingPaymentMethod && (
                    <button
                      type="button"
                      onClick={() => {
                        setEditingPaymentMethod(null);
                        setNewPaymentMethod({ name: '', fee: '0' });
                      }}
                      className="mr-3 inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Cancelar
                    </button>
                  )}
                  <button
                    type="submit"
                    disabled={savingPaymentMethod}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                  >
                    {savingPaymentMethod ? (
                      <>
                        <span className="loader mr-2"></span>
                        <span>Salvando...</span>
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        <span>{editingPaymentMethod ? 'Atualizar' : 'Adicionar'} Método</span>
                      </>
                    )}
                  </button>
                </div>
              </form>

              {/* Lista de métodos de pagamento */}
              <div className="px-4 sm:px-6 pb-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Métodos de Pagamento Cadastrados</h3>
                
                {loadingPaymentMethods ? (
                  <div className="text-center p-4">
                    <span className="loader mr-2"></span>
                    <span className="text-sm text-gray-500">Carregando métodos de pagamento...</span>
                  </div>
                ) : paymentMethods.length === 0 ? (
                  <div className="bg-blue-50 text-blue-700 border border-blue-200 rounded-lg p-4">
                    <p className="text-sm">Nenhum método de pagamento cadastrado.</p>
                  </div>
                ) : (
                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                    {/* Desktop Table */}
                    <div className="hidden sm:block">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Método
                          </th>
                          <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Taxa (%)
                          </th>
                          <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Ações
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {paymentMethods.map((method) => (
                          <tr key={method.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {method.name}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                              {method.fee.toFixed(2).replace('.', ',')}%
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                              <button
                                onClick={() => handleEditPaymentMethod(method)}
                                className="text-indigo-600 hover:text-indigo-900 mr-3"
                              >
                                Editar
                              </button>
                              <button
                                onClick={() => handleDeletePaymentMethod(method.id)}
                                className="text-red-600 hover:text-red-900"
                              >
                                Excluir
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    </div>
                    
                    {/* Mobile Cards */}
                    <div className="sm:hidden">
                      <div className="divide-y divide-gray-200">
                        {paymentMethods.map((method) => (
                          <div key={method.id} className="p-4 hover:bg-gray-50">
                            <div className="flex justify-between items-center mb-2">
                              <span className="font-medium text-gray-900">{method.name}</span>
                              <span className="text-sm bg-indigo-50 text-indigo-700 px-2 py-1 rounded-full">
                                {method.fee.toFixed(2).replace('.', ',')}%
                              </span>
                            </div>
                            <div className="flex justify-end space-x-3 mt-2">
                              <button
                                onClick={() => handleEditPaymentMethod(method)}
                                className="px-3 py-1.5 text-xs font-medium text-indigo-600 bg-indigo-50 rounded-md hover:bg-indigo-100"
                              >
                                Editar
                              </button>
                              <button
                                onClick={() => handleDeletePaymentMethod(method.id)}
                                className="px-3 py-1.5 text-xs font-medium text-red-600 bg-red-50 rounded-md hover:bg-red-100"
                              >
                                Excluir
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Seção de Caixa do Profissional */}
        {activeTab === 'caixa' && (
          <div className="max-w-6xl mx-auto">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-100 bg-gray-50">
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0">
                <div className="flex items-center space-x-3">
                  <CreditCard className="h-5 w-5 text-indigo-500" />
                  <h2 className="text-lg font-medium text-gray-900">Caixa do Profissional</h2>
                  </div>
                  {/* Botão para ver caixas fechados - oculto em mobile */}
                  <button
                    onClick={() => {
                      if (!cashSelectedProfessional) {
                        // Mostrar mensagem de toast/alerta
                        setCashMessage({ 
                          type: 'warning', 
                          text: 'Selecione um profissional para visualizar os fechamentos de caixa.' 
                        });
                        return;
                      }
                      // Buscar histórico e mostrar modal
                      fetchClosedCashHistory(cashSelectedProfessional);
                      setShowClosedCashModal(true);
                    }} 
                    className={`hidden md:inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium ${
                      !cashSelectedProfessional 
                        ? 'text-gray-400 bg-gray-50 cursor-not-allowed' 
                        : 'text-gray-700 bg-white hover:bg-gray-50'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                    disabled={!cashSelectedProfessional}
                  >
                    <History className="h-4 w-4 mr-2" />
                    Ver Caixas Fechados
                  </button>
                </div>
              </div>

              <div className="p-6">
                {/* Botão de ajuda flutuante */}
                <div className="fixed bottom-4 right-4">
                  <button
                    onClick={() => setShowHelpModal(true)}
                    className="bg-white p-2 rounded-full shadow-lg border border-gray-200 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    title="Ajuda sobre fechamento de caixa"
                  >
                    <HelpCircle className="h-6 w-6 text-indigo-500" />
                  </button>
                </div>

                {/* Modal de ajuda */}
                {showHelpModal && (
                  <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg shadow-xl max-w-lg w-full m-4">
                      <div className="p-6 border-b border-gray-200">
                        <div className="flex justify-between items-center">
                          <h3 className="text-lg font-medium text-gray-900 flex items-center">
                            <Info className="h-5 w-5 text-indigo-500 mr-2" />
                            Como funciona o fechamento de caixa
                          </h3>
                          <button
                            onClick={() => setShowHelpModal(false)}
                            className="text-gray-400 hover:text-gray-500 focus:outline-none"
                          >
                            <X className="h-6 w-6" />
                          </button>
                        </div>
                      </div>
                      <div className="p-6">
                        <div className="text-sm text-gray-600 space-y-4">
                          <p>
                            O sistema mostra apenas os atendimentos que ainda não tiveram o caixa fechado.
                            Após o fechamento, os atendimentos não aparecerão mais nesta lista e podem ser 
                            consultados na opção "Ver Caixas Fechados".
                          </p>
                          <p>
                            Ao fechar o caixa, o sistema irá:
                          </p>
                          <ul className="list-disc pl-5 space-y-2">
                            <li>Calcular o total bruto dos atendimentos</li>
                            <li>Descontar as taxas de pagamento</li>
                            <li>Calcular a parte do salão e do profissional</li>
                            <li>Descontar os vales selecionados</li>
                            <li>Gerar o valor líquido final</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Filtros */}
                <div className="grid grid-cols-1 gap-4 mb-6">
                  <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div className="p-4">
                      <div className="grid grid-cols-1 gap-4">
                        <div>
                          <label htmlFor="cashProfessional" className="block text-sm font-medium text-gray-700 mb-2">
                        <div className="flex items-center space-x-2">
                              <User className="h-4 w-4 text-indigo-500" />
                          <span>Profissional</span>
                        </div>
                      </label>
                          <div className="relative">
                      <select
                        id="cashProfessional"
                        value={cashSelectedProfessional}
                        onChange={(e) => setCashSelectedProfessional(e.target.value)}
                              className="block w-full pl-3 pr-10 py-3 text-base border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-lg bg-white shadow-sm appearance-none"
                      >
                        <option value="">Selecione um profissional</option>
                        {professionals.map((professional) => (
                          <option key={professional.id} value={professional.id}>
                            {professional.name}
                          </option>
                        ))}
                      </select>
                            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                              <ChevronDown className="h-4 w-4" />
                    </div>
                        </div>
                    </div>

                        {/* Substituir os inputs de data por um botão de seleção de período */}
                        <div>
                          <button
                            onClick={() => setShowCashDatePicker(true)}
                            className="relative flex flex-col md:flex-row items-start md:items-center gap-2 p-4 bg-white border border-gray-200 rounded-xl hover:bg-gray-50 transition-all duration-200 shadow-sm w-full text-left"
                          >
                            <div className="flex items-center gap-2 text-indigo-600 mb-1 md:mb-0">
                              <CalendarRange className="h-5 w-5" />
                              <span className="text-sm font-medium">Período Selecionado</span>
                        </div>
                            
                            <div className="flex flex-col md:flex-row md:items-center gap-1 w-full md:w-auto">
                              <div className="flex items-center gap-2">
                                <span className="text-base font-semibold text-gray-900">
                                  {format(parseISO(cashStartDate), "dd/MM/yyyy")}
                                </span>
                                {cashStartDate !== cashEndDate && (
                                  <>
                                    <span className="text-gray-400">→</span>
                                    <span className="text-base font-semibold text-gray-900">
                                      {format(parseISO(cashEndDate), "dd/MM/yyyy")}
                                    </span>
                                  </>
                                )}
                                {cashStartDate === cashEndDate && (
                                  <span className="text-sm text-indigo-600 bg-indigo-50 px-2 py-0.5 rounded-full">Hoje</span>
                                )}
                    </div>
                  </div>
                  
                            <div className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400">
                              <ChevronDown className="h-5 w-5" />
                            </div>
                          </button>
                        </div>
                      
                        <div className="mt-6">
                    <button
                            className="w-full flex items-center justify-center px-6 py-3 rounded-xl shadow-sm text-white font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden"
                            style={{
                              background: "linear-gradient(to right, #6366f1, #8b5cf6)"
                            }}
                      onClick={fetchCashDetails}
                      disabled={loadingCash || !cashSelectedProfessional || !cashStartDate || !cashEndDate}
                    >
                            <span className="relative z-10 flex items-center">
                      <Filter className="w-5 h-5 mr-2" />
                              <span>{loadingCash ? 'Carregando...' : 'Buscar Dados do Caixa'}</span>
                            </span>
                    </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Modal do Calendário para a seção de caixa */}
                  {showCashDatePicker && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
                      <div className="bg-white rounded-lg shadow-xl p-4 max-w-sm w-full md:w-96 mx-auto transform transition-all duration-300 ease-in-out">
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-base font-medium text-gray-900">Selecionar Período</h3>
                          <button
                            onClick={() => setShowCashDatePicker(false)}
                            className="text-gray-400 hover:text-gray-500 p-2 rounded-full hover:bg-gray-100 transition-colors"
                          >
                            <X className="h-5 w-5" />
                          </button>
                        </div>

                        {/* Botões de período rápido */}
                        <div className="grid grid-cols-2 gap-2 mb-6">
                          <button
                            onClick={() => {
                              const today = new Date();
                              setCashStartDate(format(startOfDay(today), 'yyyy-MM-dd'));
                              setCashEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                              setCashSelectedPeriod('today');
                            }}
                            className={`flex items-center justify-center gap-2 px-4 py-3 border rounded-lg transition-colors ${
                              cashSelectedPeriod === 'today' 
                                ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                                : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                            }`}
                          >
                            <Calendar className={`h-4 w-4 ${
                              cashSelectedPeriod === 'today' ? 'text-indigo-600' : 'text-indigo-500'
                            }`} />
                            <span className="text-sm font-medium">Hoje</span>
                          </button>

                          <button
                            onClick={() => {
                              const today = new Date();
                              setCashStartDate(format(startOfDay(subDays(today, 7)), 'yyyy-MM-dd'));
                              setCashEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                              setCashSelectedPeriod('7days');
                            }}
                            className={`flex items-center justify-center gap-2 px-4 py-3 border rounded-lg transition-colors ${
                              cashSelectedPeriod === '7days'
                                ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                                : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                            }`}
                          >
                            <CalendarRange className={`h-4 w-4 ${
                              cashSelectedPeriod === '7days' ? 'text-indigo-600' : 'text-indigo-500'
                            }`} />
                            <span className="text-sm font-medium">Últimos 7 dias</span>
                          </button>

                          <button
                            onClick={() => {
                              const today = new Date();
                              setCashStartDate(format(startOfDay(subDays(today, 30)), 'yyyy-MM-dd'));
                              setCashEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                              setCashSelectedPeriod('30days');
                            }}
                            className={`flex items-center justify-center gap-2 px-4 py-3 border rounded-lg transition-colors ${
                              cashSelectedPeriod === '30days'
                                ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                                : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                            }`}
                          >
                            <CalendarRange className={`h-4 w-4 ${
                              cashSelectedPeriod === '30days' ? 'text-indigo-600' : 'text-indigo-500'
                            }`} />
                            <span className="text-sm font-medium">Último mês</span>
                          </button>

                          <button
                            onClick={() => {
                              const today = new Date();
                              setCashStartDate(format(startOfDay(subDays(today, 90)), 'yyyy-MM-dd'));
                              setCashEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                              setCashSelectedPeriod('90days');
                            }}
                            className={`flex items-center justify-center gap-2 px-4 py-3 border rounded-lg transition-colors ${
                              cashSelectedPeriod === '90days'
                                ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                                : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                            }`}
                          >
                            <CalendarRange className={`h-4 w-4 ${
                              cashSelectedPeriod === '90days' ? 'text-indigo-600' : 'text-indigo-500'
                            }`} />
                            <span className="text-sm font-medium">Últimos 90 dias</span>
                          </button>
                        </div>

                        <div className="text-sm font-medium text-gray-700 mb-4">Ou selecione um período personalizado:</div>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Data Inicial</label>
                            <DatePicker
                              selected={parseISO(cashStartDate)}
                              onChange={(date: Date) => {
                                setCashStartDate(format(date, 'yyyy-MM-dd'));
                                setCashSelectedPeriod('custom');
                              }}
                              dateFormat="dd/MM/yyyy"
                              locale="pt-BR"
                              monthsShown={1}
                              showMonthDropdown
                              showYearDropdown
                              dropdownMode="select"
                              customInput={
                                <button className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm text-left bg-white">
                                  {format(parseISO(cashStartDate), 'dd/MM/yyyy')}
                                </button>
                              }
                            />
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Data Final</label>
                            <DatePicker
                              selected={parseISO(cashEndDate)}
                              onChange={(date: Date) => {
                                setCashEndDate(format(date, 'yyyy-MM-dd'));
                                setCashSelectedPeriod('custom');
                              }}
                              dateFormat="dd/MM/yyyy"
                              locale="pt-BR"
                              monthsShown={1}
                              showMonthDropdown
                              showYearDropdown
                              dropdownMode="select"
                              customInput={
                                <button className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm text-left bg-white">
                                  {format(parseISO(cashEndDate), 'dd/MM/yyyy')}
                                </button>
                              }
                            />
                          </div>
                        </div>
                        
                        <div className="mt-6 flex justify-end">
                          <button
                            onClick={() => setShowCashDatePicker(false)}
                            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 font-medium text-sm transition-colors"
                          >
                            Aplicar
                          </button>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Botões de ações rápidas para dispositivos móveis */}
                  <div className="md:hidden">
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => {
                          if (!cashSelectedProfessional) {
                            setCashMessage({ 
                              type: 'warning', 
                              text: 'Selecione um profissional para visualizar os fechamentos de caixa.' 
                            });
                            return;
                          }
                          fetchClosedCashHistory(cashSelectedProfessional);
                          setShowClosedCashModal(true);
                        }}
                        className={`flex flex-col items-center justify-center p-4 rounded-xl border ${
                          !cashSelectedProfessional 
                            ? 'border-gray-200 bg-gray-50 text-gray-400' 
                            : 'border-indigo-200 bg-indigo-50 text-indigo-700'
                        }`}
                        disabled={!cashSelectedProfessional}
                      >
                        <History className="h-6 w-6 mb-1" />
                        <span className="text-sm font-medium">Ver Histórico</span>
                      </button>
                      
                      <button
                        onClick={() => setShowHelpModal(true)}
                        className="flex flex-col items-center justify-center p-4 rounded-xl border border-green-200 bg-green-50 text-green-700"
                      >
                        <HelpCircle className="h-6 w-6 mb-1" />
                        <span className="text-sm font-medium">Ajuda</span>
                      </button>
                    </div>
                  </div>

                  {/* Mensagens de erro ou aviso */}
                  {cashMessage.text && (
                    <div className={`p-4 rounded-xl ${
                      cashMessage.type === 'error' ? 'bg-red-50 text-red-800 border border-red-200' :
                      cashMessage.type === 'warning' ? 'bg-amber-50 text-amber-800 border border-amber-200' :
                      cashMessage.type === 'success' ? 'bg-emerald-50 text-emerald-800 border border-emerald-200' :
                      'bg-blue-50 text-blue-800 border border-blue-200'
                    }`}>
                      <div className="flex">
                        {cashMessage.type === 'error' && <XCircle className="w-5 h-5 mr-2 flex-shrink-0" />}
                        {cashMessage.type === 'warning' && <AlertTriangle className="w-5 h-5 mr-2 flex-shrink-0" />}
                        {cashMessage.type === 'success' && <CheckCircle className="w-5 h-5 mr-2 flex-shrink-0" />}
                        {cashMessage.type === 'info' && <Info className="w-5 h-5 mr-2 flex-shrink-0" />}
                        <span className="text-sm">{cashMessage.text}</span>
                      </div>
                    </div>
                  )}
                </div>

                {/* Tabela de atendimentos */}
                {appointments.length > 0 && (
                  <>
                    <div className="hidden md:block mb-4">
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div className="flex">
                          <div className="flex-shrink-0">
                            <Info className="h-5 w-5 text-blue-400" />
                          </div>
                          <div className="ml-3">
                            <h3 className="text-sm font-medium text-blue-800">
                              Apenas serviços pendentes
                            </h3>
                            <div className="mt-2 text-sm text-blue-700">
                              <p>
                                Estão sendo exibidos apenas os serviços que ainda não passaram por fechamento de caixa.
                                {closedDates.length > 0 && ' Algumas datas no período selecionado já foram fechadas.'}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Tabela para desktop */}
                    <div className="hidden md:block overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Cliente/Data
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Serviços
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Método de Pagamento
                            </th>
                            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Valor Total ({formatCurrency(totalEarnings)})
                            </th>
                            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Taxa Pagamento ({formatCurrency(totalPaymentFees)})
                            </th>
                            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Parte do Salão ({formatCurrency(totalSalonShare)})
                            </th>
                            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Valor Prof. ({formatCurrency(totalProfessionalShare)})
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {appointments.map((appointment) => {
                            const appointmentDate = format(parseISO(appointment.date), 'dd/MM/yyyy');
                            
                            // Calcular o total do atendimento após processar todos os serviços
                            const totalServicesValue = appointment.total_value;
                            const paymentFeeValue = totalServicesValue * (appointment.payment_fee_percent / 100);
                            const afterFeeValue = totalServicesValue - paymentFeeValue;

                            // Calcular os valores para cada serviço individualmente
                            const serviceCalculations = appointment.services.map(service => {
                              const serviceValue = service.price;
                              const serviceFeeValue = serviceValue * (appointment.payment_fee_percent / 100);
                              const serviceAfterFee = serviceValue - serviceFeeValue;
                              const serviceSalonShare = serviceAfterFee * ((100 - service.commission) / 100);
                              const serviceProfessionalShare = serviceAfterFee - serviceSalonShare;

                              return {
                                ...service,
                                feeValue: serviceFeeValue,
                                afterFee: serviceAfterFee,
                                salonShare: serviceSalonShare,
                                professionalShare: serviceProfessionalShare
                              };
                            });

                            // Calcular totais
                            const totalProfessionalShare = serviceCalculations.reduce(
                              (sum, service) => sum + service.professionalShare, 
                              0
                            );

                            return (
                              <React.Fragment key={appointment.id}>
                                {/* Linha principal com informações do cliente */}
                                <tr className="bg-indigo-50 border-t-2 border-b border-indigo-100 font-medium">
                                  <td className="px-6 py-4 whitespace-nowrap" colSpan={2}>
                                    <div className="flex flex-col">
                                      <span className="text-lg font-semibold text-gray-900">{appointment.client.name}</span>
                                      <span className="text-sm text-indigo-600">{appointmentDate} às {appointment.time.substr(0, 5)}</span>
                                    </div>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-base text-indigo-700">
                                    {appointment.payment_method}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-base text-gray-900 text-right font-semibold">
                                    {formatCurrency(totalServicesValue)}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-base text-red-600 text-right">
                                    <div className="flex flex-col items-end">
                                      <span className="font-semibold">- {formatCurrency(paymentFeeValue)}</span>
                                      <span className="text-xs text-indigo-600">({appointment.payment_fee_percent.toFixed(2)}%)</span>
                                    </div>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-base text-right">
                                    {/* Célula vazia para manter alinhamento */}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-lg font-bold text-emerald-600 text-right">
                                    {formatCurrency(totalProfessionalShare)}
                                  </td>
                                </tr>
                                {/* Linhas de detalhamento dos serviços */}
                                {serviceCalculations.map((service, index) => (
                                  <tr key={`${appointment.id}-service-${index}`} className="text-sm bg-white">
                                    <td className="pl-10 pr-6 py-2 whitespace-nowrap" colSpan={2}>
                                      <div className="flex items-center text-gray-600">
                                        <span>• {service.name}</span>
                                        <span className="ml-2 text-xs text-gray-400">
                                          ({service.commission}%)
                                        </span>
                                      </div>
                                    </td>
                                    <td className="px-6 py-2 whitespace-nowrap">
                                      {/* Célula vazia */}
                                    </td>
                                    <td className="px-6 py-2 whitespace-nowrap text-gray-600 text-right">
                                      {formatCurrency(service.price)}
                                    </td>
                                    <td className="px-6 py-2 whitespace-nowrap text-red-500 text-right">
                                      - {formatCurrency(service.feeValue)}
                                    </td>
                                    <td className="px-6 py-2 whitespace-nowrap text-red-500 text-right">
                                      - {formatCurrency(service.salonShare)}
                                    </td>
                                    <td className="px-6 py-2 whitespace-nowrap text-emerald-500 text-right">
                                      {formatCurrency(service.professionalShare)}
                                    </td>
                                  </tr>
                                ))}
                              </React.Fragment>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>

                    {/* Cards para mobile */}
                    <div className="md:hidden space-y-4">
                      {appointments.map((appointment) => {
                        const appointmentDate = format(parseISO(appointment.date), 'dd/MM/yyyy');
                        
                        // Calcular o total do atendimento após processar todos os serviços
                        const totalServicesValue = appointment.total_value;
                        const paymentFeeValue = totalServicesValue * (appointment.payment_fee_percent / 100);
                        const afterFeeValue = totalServicesValue - paymentFeeValue;

                        // Calcular os valores para cada serviço individualmente
                        const serviceCalculations = appointment.services.map(service => {
                          const serviceValue = service.price;
                          const serviceFeeValue = serviceValue * (appointment.payment_fee_percent / 100);
                          const serviceAfterFee = serviceValue - serviceFeeValue;
                          const serviceSalonShare = serviceAfterFee * ((100 - service.commission) / 100);
                          const serviceProfessionalShare = serviceAfterFee - serviceSalonShare;

                          return {
                            ...service,
                            feeValue: serviceFeeValue,
                            afterFee: serviceAfterFee,
                            salonShare: serviceSalonShare,
                            professionalShare: serviceProfessionalShare
                          };
                        });

                        // Calcular totais
                        const totalProfessionalShare = serviceCalculations.reduce(
                          (sum, service) => sum + service.professionalShare, 
                          0
                        );

                        return (
                          <div 
                            key={appointment.id}
                            className="bg-white rounded-xl border border-indigo-100 shadow-sm overflow-hidden"
                          >
                            {/* Cabeçalho do card */}
                            <div className="bg-indigo-50 p-4 border-b border-indigo-100">
                              <div className="flex justify-between items-start">
                                <div className="flex flex-col">
                                  <span className="text-lg font-semibold text-gray-900">{appointment.client.name}</span>
                                  <span className="text-sm text-indigo-600">{appointmentDate} às {appointment.time.substr(0, 5)}</span>
                                </div>
                                <div className="px-3 py-1 bg-white rounded-full text-indigo-600 font-medium text-xs border border-indigo-200">
                                  {appointment.payment_method}
                                </div>
                              </div>
                            </div>
                            
                            {/* Corpo do card - serviços */}
                            <div className="p-4">
                              <div className="space-y-3 mb-4">
                                <h4 className="text-sm font-medium text-gray-500">Serviços</h4>
                                {serviceCalculations.map((service, index) => (
                                  <div key={`${appointment.id}-service-${index}`} className="flex justify-between border-b border-gray-100 pb-2">
                                    <div className="flex items-center text-gray-600">
                                      <span className="text-sm">{service.name}</span>
                                      <span className="ml-2 text-xs text-gray-400">
                                        ({service.commission}%)
                                      </span>
                                    </div>
                                    <span className="text-sm font-medium">{formatCurrency(service.price)}</span>
                                  </div>
                                ))}
                              </div>
                              
                              {/* Resumo financeiro */}
                              <div className="bg-gray-50 p-3 rounded-lg space-y-2 mt-4">
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600">Valor total:</span>
                                  <span className="text-base font-medium">{formatCurrency(totalServicesValue)}</span>
                                </div>
                                <div className="flex justify-between items-center text-red-600">
                                  <span className="text-sm flex items-center gap-1">
                                    <MinusCircle className="h-3 w-3" />
                                    Taxa ({appointment.payment_fee_percent.toFixed(2)}%):
                                  </span>
                                  <span className="text-base">-{formatCurrency(paymentFeeValue)}</span>
                                </div>
                                <div className="flex justify-between items-center text-red-600">
                                  <span className="text-sm flex items-center gap-1">
                                    <MinusCircle className="h-3 w-3" />
                                    Parte do salão:
                                  </span>
                                  <span className="text-base">-{formatCurrency(afterFeeValue - totalProfessionalShare)}</span>
                                </div>
                                <div className="flex justify-between items-center pt-2 border-t border-gray-200 mt-2">
                                  <span className="text-sm font-medium text-gray-700">Valor do profissional:</span>
                                  <span className="text-lg font-bold text-emerald-600">{formatCurrency(totalProfessionalShare)}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>

                    {/* Seção de vales */}
                    {employeeAdvances.length > 0 && (
                      <div className="mt-8 border-t border-gray-200 pt-6">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
                          <h3 className="text-lg font-medium text-gray-900">Vales Pendentes</h3>
                          <div className="flex items-center gap-4 sm:gap-2">
                            <button
                              onClick={() => setSelectedAdvances(employeeAdvances.map(a => a.id))}
                              className="px-4 py-1.5 bg-indigo-50 text-indigo-600 rounded-lg text-sm font-medium hover:bg-indigo-100 transition-colors"
                            >
                              Selecionar Todos
                            </button>
                            <button
                              onClick={() => setSelectedAdvances([])}
                              className="px-4 py-1.5 bg-gray-50 text-gray-600 rounded-lg text-sm font-medium hover:bg-gray-100 transition-colors"
                            >
                              Limpar Seleção
                            </button>
                          </div>
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                          {employeeAdvances.map((advance) => {
                            const isSelected = selectedAdvances.includes(advance.id);
                            return (
                              <div
                                key={advance.id}
                                className={`relative rounded-lg border p-4 transition-all duration-200 ${
                                  isSelected 
                                    ? 'border-indigo-200 bg-indigo-50 shadow-sm' 
                                    : 'border-gray-200 bg-white hover:border-gray-300'
                                }`}
                                onClick={() => {
                                  setSelectedAdvances(prev => 
                                    isSelected 
                                      ? prev.filter(id => id !== advance.id)
                                      : [...prev, advance.id]
                                  );
                                }}
                              >
                                <div className="absolute top-4 right-4">
                                  <input
                                    type="checkbox"
                                    checked={isSelected}
                                    onChange={() => {
                                      setSelectedAdvances(prev => 
                                        isSelected 
                                          ? prev.filter(id => id !== advance.id)
                                          : [...prev, advance.id]
                                      );
                                    }}
                                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                  />
                                </div>

                                <div className="flex flex-col space-y-2">
                                  <div className="flex items-center space-x-2">
                                    <Calendar className="h-4 w-4 text-gray-400" />
                                    <span className="text-sm text-gray-600">
                                          {format(parseISO(advance.date), 'dd/MM/yyyy')}
                                    </span>
                                  </div>

                                  <div className="flex items-center space-x-2">
                                    <DollarSign className="h-4 w-4 text-gray-400" />
                                    <span className="text-lg font-medium text-gray-900">
                                          {formatCurrency(advance.amount)}
                                    </span>
                              </div>

                                  <div className="text-sm text-gray-500">
                                    {isSelected ? 'Será descontado neste fechamento' : 'Ficará para o próximo fechamento'}
                            </div>
                          </div>
                        </div>
                            );
                          })}
                        </div>

                        <div className="mt-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                            <div className="flex items-center space-x-2">
                              <FileText className="h-5 w-5 text-yellow-500" />
                              <span className="text-sm font-medium text-yellow-800">
                                Total selecionado: {formatCurrency(
                                  employeeAdvances
                                    .filter(advance => selectedAdvances.includes(advance.id))
                                    .reduce((sum, advance) => sum + advance.amount, 0)
                                )}
                              </span>
                            </div>
                            <div className="text-sm text-yellow-700">
                              {selectedAdvances.length} de {employeeAdvances.length} vales selecionados
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Resumo */}
                    <div className="mt-8 border-t border-gray-200 pt-6">
                      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                        <div className="px-4 py-5 sm:p-6">
                          <h3 className="text-lg font-medium text-gray-900 mb-5">Resumo do Caixa</h3>
                          <div className="space-y-4">
                            <div className="flex justify-between items-center pb-2 border-b border-gray-100">
                          <span className="text-sm font-medium text-gray-700">Total Bruto:</span>
                          <span className="text-lg font-semibold text-gray-900">{formatCurrency(totalEarnings)}</span>
                        </div>
                            <div className="flex justify-between items-center pb-2 border-b border-gray-100">
                          <span className="text-sm font-medium text-gray-700">
                            Taxas de Pagamento: 
                            <span className="text-xs text-gray-500 ml-1">
                              (média: {totalEarnings > 0 ? ((totalPaymentFees / totalEarnings) * 100).toFixed(2) : '0.00'}%)
                            </span>
                          </span>
                          <span className="text-base font-medium text-red-600">- {formatCurrency(totalPaymentFees)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm font-medium text-gray-700">
                            Após taxas de pagamento:
                          </span>
                          <span className="text-base font-medium text-gray-700">{formatCurrency(totalAfterPaymentFees)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm font-medium text-gray-700">
                            Parte do Salão: 
                            <span className="text-xs text-gray-500 ml-1">
                              ({totalAfterPaymentFees > 0 ? ((totalSalonShare / totalAfterPaymentFees) * 100).toFixed(2) : '0.00'}%)
                            </span>
                          </span>
                          <span className="text-base font-medium text-red-600">- {formatCurrency(totalSalonShare)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm font-medium text-gray-700">
                            Parte do Profissional:
                          </span>
                          <span className="text-base font-medium text-emerald-600">{formatCurrency(totalProfessionalShare)}</span>
                        </div>
                        {totalAdvances > 0 && (
                          <div className="flex justify-between items-center">
                            <span className="text-sm font-medium text-gray-700">Vales:</span>
                            <span className="text-base font-medium text-red-600">- {formatCurrency(totalAdvances)}</span>
                          </div>
                        )}
                        <div className="flex justify-between items-center pt-4 border-t border-gray-200">
                          <span className="text-base font-semibold text-gray-800">Valor Líquido do Profissional:</span>
                          <span className="text-xl font-bold text-emerald-600">{formatCurrency(netIncome)}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="border-t border-gray-300 pt-4 mt-4">
                      {appointments.length > 0 && totalProfessionalShare > 0 ? (
                      <button
                        onClick={handleCloseCash}
                        className="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        Fechar Caixa
                      </button>
                      ) : (
                        <div className="text-center py-2">
                          <p className="text-sm text-gray-500">
                            {appointments.length === 0 
                              ? 'Nenhum atendimento pendente para fechamento'
                              : 'Não há valores a serem fechados para este período'}
                          </p>
                        </div>
                      )}
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* Modal de Caixas Fechados */}
            {showClosedCashModal && (
              <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center z-50">
                <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
                  <div className="p-4 sm:p-6 border-b border-gray-200">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-medium text-gray-900">
                        Histórico de Fechamentos de Caixa
                      </h3>
                      <button
                        onClick={() => setShowClosedCashModal(false)}
                        className="text-gray-400 hover:text-gray-500 focus:outline-none"
                      >
                        <span className="sr-only">Fechar</span>
                        <X className="h-6 w-6" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="overflow-auto max-h-[calc(90vh-200px)] p-4 sm:p-6">
                    {loadingClosedCash ? (
                      <div className="flex justify-center items-center h-40">
                        <div className="loader"></div>
                      </div>
                    ) : closedCashHistory.length === 0 ? (
                      <div className="text-center py-10 text-gray-500">
                        Nenhum fechamento de caixa encontrado para este profissional.
                      </div>
                    ) : (
                      <>
                        {/* Tabela para desktop */}
                        <div className="hidden md:block overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Período
                              </th>
                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Total Bruto
                              </th>
                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Taxas
                              </th>
                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Comissões
                              </th>
                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Vales
                              </th>
                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Líquido
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {closedCashHistory.map((cash) => (
                              <tr key={cash.id} className="hover:bg-gray-50 transition-colors duration-150">
                                  <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="flex flex-col sm:flex-row sm:items-center">
                                    <span className="text-sm text-gray-900 font-medium">
                                      {format(parseISO(cash.period_start), 'dd/MM/yyyy')}
                                    </span>
                                    <span className="text-gray-400 mx-2 hidden sm:inline">até</span>
                                    <span className="text-sm text-gray-900">
                                      {format(parseISO(cash.period_end), 'dd/MM/yyyy')}
                                    </span>
                                  </div>
                                </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right font-medium">
                                  {formatCurrency(cash.total_earnings)}
                                </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 text-right">
                                  - {formatCurrency(cash.total_payment_fees)}
                                </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 text-right">
                                  - {formatCurrency(cash.total_commissions)}
                                </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 text-right">
                                  - {formatCurrency(cash.total_advances)}
                                </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-emerald-600 text-right">
                                  {formatCurrency(cash.net_income)}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                          <tfoot className="bg-gray-50">
                            <tr>
                                <td colSpan={6} className="px-6 py-4">
                                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm text-gray-500">
                                  <span>Total de {closedCashHistory.length} caixas fechados</span>
                                  <span className="mt-2 sm:mt-0">
                                    Total líquido: {formatCurrency(
                                      closedCashHistory.reduce((sum, cash) => sum + cash.net_income, 0)
                                    )}
                                  </span>
                                </div>
                              </td>
                            </tr>
                          </tfoot>
                        </table>
                      </div>

                        {/* Cards para mobile */}
                        <div className="md:hidden space-y-4">
                          <div className="bg-gray-50 rounded-lg p-4 mb-4 flex justify-between items-center">
                            <span className="text-sm font-medium text-gray-700">
                              Total de {closedCashHistory.length} caixas
                            </span>
                            <span className="text-sm font-bold text-indigo-700">
                              Líquido: {formatCurrency(
                                closedCashHistory.reduce((sum, cash) => sum + cash.net_income, 0)
                              )}
                            </span>
                  </div>

                          {closedCashHistory.map((cash) => (
                            <div 
                              key={cash.id} 
                              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"
                            >
                              <div className="bg-indigo-50 px-4 py-3 border-b border-indigo-100">
                                <div className="flex flex-col">
                                  <span className="text-sm font-medium text-gray-700">Período:</span>
                                  <div className="flex items-center mt-1">
                                    <span className="text-base font-semibold text-gray-900">
                                      {format(parseISO(cash.period_start), 'dd/MM/yyyy')}
                                    </span>
                                    <span className="text-gray-400 mx-2">até</span>
                                    <span className="text-base font-semibold text-gray-900">
                                      {format(parseISO(cash.period_end), 'dd/MM/yyyy')}
                                    </span>
                </div>
              </div>
                              </div>

                              <div className="p-4">
                                <div className="space-y-3">
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">Total Bruto:</span>
                                    <span className="text-base font-medium text-gray-900">
                                      {formatCurrency(cash.total_earnings)}
                                    </span>
                                  </div>
                                  
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">Taxas:</span>
                                    <span className="text-sm font-medium text-red-600">
                                      - {formatCurrency(cash.total_payment_fees)}
                                    </span>
                                  </div>
                                  
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">Comissões:</span>
                                    <span className="text-sm font-medium text-red-600">
                                      - {formatCurrency(cash.total_commissions)}
                                    </span>
                                  </div>
                                  
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">Vales:</span>
                                    <span className="text-sm font-medium text-red-600">
                                      - {formatCurrency(cash.total_advances)}
                                    </span>
                                  </div>
                                  
                                  <div className="flex justify-between items-center pt-3 mt-2 border-t border-gray-100">
                                    <span className="text-sm font-medium text-gray-700">Líquido:</span>
                                    <span className="text-lg font-bold text-emerald-600">
                                      {formatCurrency(cash.net_income)}
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Seção de Histórico */}
        {activeTab === 'historico' && (
          <div className="max-w-6xl mx-auto">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
              <div className="px-4 py-3 border-b border-gray-100 bg-gray-50 md:px-6 md:py-4">
                <div className="flex items-center space-x-3">
                  <History className="h-5 w-5 text-indigo-500" />
                  <h2 className="text-base md:text-lg font-medium text-gray-900">Histórico Financeiro</h2>
                </div>
              </div>

              <div className="p-4 md:p-6">
                {/* Indicador de período - versão mais compacta */}
                <div className="flex flex-col gap-3 mb-4">
                  <button
                    onClick={() => setShowDatePicker(true)}
                    className="relative flex items-center gap-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-all duration-200 shadow-sm w-full text-left"
                  >
                    <div className="flex items-center text-indigo-600">
                      <CalendarRange className="h-5 w-5" />
                    </div>
                    
                    <div className="flex flex-wrap items-center gap-1">
                      <span className="text-sm font-medium text-gray-900">
                        {format(parseISO(historyStartDate), "dd/MM/yyyy")}
                    </span>
                      {historyStartDate !== historyEndDate && (
                        <>
                          <span className="text-gray-400">→</span>
                          <span className="text-sm font-medium text-gray-900">
                            {format(parseISO(historyEndDate), "dd/MM/yyyy")}
                          </span>
                        </>
                      )}
                      {historyStartDate === historyEndDate && (
                        <span className="text-xs bg-indigo-50 text-indigo-600 px-2 py-0.5 rounded-full ml-1">Hoje</span>
                      )}
                  </div>
                    
                    <div className="absolute right-3 text-gray-400">
                      <ChevronDown className="h-4 w-4" />
                    </div>
                  </button>
                </div>

                {/* Modal do Calendário */}
                {showDatePicker && (
                  <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
                    <div className="bg-white rounded-lg shadow-xl p-4 max-w-sm w-full md:w-96 mx-auto transform transition-all duration-300 ease-in-out">
                      <div className="flex justify-between items-center mb-3">
                        <h3 className="text-base font-medium text-gray-900">Selecionar Período</h3>
                    <button
                          onClick={() => setShowDatePicker(false)}
                          className="text-gray-400 hover:text-gray-500 p-1.5 rounded-full hover:bg-gray-100"
                        >
                          <X className="h-5 w-5" />
                        </button>
                      </div>

                      {/* Botões de período rápido */}
                      <div className="grid grid-cols-2 gap-2 mb-4">
                        <button
                          onClick={() => {
                            const today = new Date();
                            setHistoryStartDate(format(startOfDay(today), 'yyyy-MM-dd'));
                            setHistoryEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                            setSelectedPeriod('today');
                          }}
                          className={`flex items-center justify-center gap-2 px-3 py-2 border rounded-lg transition-colors ${
                        selectedPeriod === 'today' 
                              ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                              : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                      }`}
                    >
                          <Calendar className="h-4 w-4 text-indigo-500" />
                          <span className="text-sm font-medium">Hoje</span>
                    </button>

                    <button
                          onClick={() => {
                            const today = new Date();
                            setHistoryStartDate(format(startOfDay(subDays(today, 7)), 'yyyy-MM-dd'));
                            setHistoryEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                            setSelectedPeriod('7days');
                          }}
                          className={`flex items-center justify-center gap-2 px-3 py-2 border rounded-lg transition-colors ${
                            selectedPeriod === '7days'
                              ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                              : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                          }`}
                        >
                          <CalendarRange className="h-4 w-4 text-indigo-500" />
                          <span className="text-sm font-medium">Últimos 7 dias</span>
                    </button>

                    <button
                          onClick={() => {
                            const today = new Date();
                            setHistoryStartDate(format(startOfDay(subDays(today, 30)), 'yyyy-MM-dd'));
                            setHistoryEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                            setSelectedPeriod('30days');
                          }}
                          className={`flex items-center justify-center gap-2 px-3 py-2 border rounded-lg transition-colors ${
                            selectedPeriod === '30days'
                              ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                              : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                          }`}
                        >
                          <CalendarRange className="h-4 w-4 text-indigo-500" />
                          <span className="text-sm font-medium">Último mês</span>
                    </button>

                    <button
                          onClick={() => {
                            const today = new Date();
                            setHistoryStartDate(format(startOfDay(subDays(today, 90)), 'yyyy-MM-dd'));
                            setHistoryEndDate(format(endOfDay(today), 'yyyy-MM-dd'));
                            setSelectedPeriod('90days');
                          }}
                          className={`flex items-center justify-center gap-2 px-3 py-2 border rounded-lg transition-colors ${
                            selectedPeriod === '90days'
                              ? 'bg-indigo-50 border-indigo-500 text-indigo-700'
                              : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
                          }`}
                        >
                          <CalendarRange className="h-4 w-4 text-indigo-500" />
                          <span className="text-sm font-medium">Últimos 90 dias</span>
                    </button>
                  </div>

                      <div className="text-sm font-medium text-gray-700 mb-3">Ou selecione um período personalizado:</div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Data Inicial</label>
                          <DatePicker
                            selected={parseISO(historyStartDate)}
                            onChange={(date: Date) => {
                              setHistoryStartDate(format(date, 'yyyy-MM-dd'));
                              setSelectedPeriod('custom');
                            }}
                            dateFormat="dd/MM/yyyy"
                            locale="pt-BR"
                            monthsShown={1}
                            showMonthDropdown
                            showYearDropdown
                            dropdownMode="select"
                            customInput={
                              <button className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm text-left bg-white">
                                {format(parseISO(historyStartDate), 'dd/MM/yyyy')}
                              </button>
                            }
                          />
                </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Data Final</label>
                          <DatePicker
                            selected={parseISO(historyEndDate)}
                            onChange={(date: Date) => {
                              setHistoryEndDate(format(date, 'yyyy-MM-dd'));
                              setSelectedPeriod('custom');
                            }}
                            dateFormat="dd/MM/yyyy"
                            locale="pt-BR"
                            monthsShown={1}
                            showMonthDropdown
                            showYearDropdown
                            dropdownMode="select"
                            customInput={
                              <button className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm text-left bg-white">
                                {format(parseISO(historyEndDate), 'dd/MM/yyyy')}
                              </button>
                            }
                          />
                        </div>
                      </div>
                      
                      <div className="mt-4 flex justify-end">
                        <button
                          onClick={() => setShowDatePicker(false)}
                          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 font-medium text-sm"
                        >
                          Aplicar
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                {/* Cards de resumo financeiro com transição suave */}
                <div 
                  className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6 transition-opacity duration-300 ease-in-out ${isUpdating ? 'opacity-60' : 'opacity-100'}`}
                >
                  {/* Card de Faturamento Total */}
                  <div className="bg-white rounded-lg shadow p-4 border border-gray-200 transition-all duration-300">
                    <h3 className="text-sm text-gray-600 mb-1">Faturamento Total (Finalizado)</h3>
                    {(historicalData.loading || isUpdating) ? (
                      <div className="animate-pulse h-8 bg-gray-200 rounded w-3/4"></div>
                    ) : (
                      <p className="text-2xl font-semibold text-gray-900">
                        {formatCurrency(historicalData.totalEarnings)}
                      </p>
                    )}
                      </div>
                  
                  {/* Card de Lucro sobre Produtos */}
                  <div className="bg-white rounded-lg shadow p-4 border border-gray-200 transition-all duration-300">
                    <h3 className="text-sm text-gray-600 mb-1">Lucro sobre Produtos (Finalizado)</h3>
                    {(historicalData.loading || isUpdating) ? (
                      <div className="animate-pulse h-8 bg-gray-200 rounded w-3/4"></div>
                    ) : (
                      <p className="text-2xl font-semibold text-emerald-600">
                        {formatCurrency(historicalData.totalProductProfit)}
                      </p>
                    )}
                  </div>
                  
                  {/* Card de Lucro sobre Serviços */}
                  <div className="bg-white rounded-lg shadow p-4 border border-gray-200 transition-all duration-300">
                    <h3 className="text-sm text-gray-600 mb-1">Lucro sobre Serviços (Finalizado)</h3>
                    {(historicalData.loading || isUpdating) ? (
                      <div className="animate-pulse h-8 bg-gray-200 rounded w-3/4"></div>
                    ) : (
                      <p className="text-2xl font-semibold text-emerald-600">
                        {formatCurrency(historicalData.totalCommissions)}
                      </p>
                    )}
                  </div>
                  
                  {/* Card de Lucro Total */}
                  <div className="bg-white rounded-lg shadow p-4 border border-gray-200 transition-all duration-300">
                    <h3 className="text-sm text-gray-600 mb-1">Lucro Total (Finalizado)</h3>
                    {(historicalData.loading || isUpdating) ? (
                      <div className="animate-pulse h-8 bg-gray-200 rounded w-3/4"></div>
                    ) : (
                      <p className="text-2xl font-semibold text-green-600">
                        {formatCurrency(
                          // Soma do lucro sobre produtos e lucro sobre serviços
                          historicalData.totalProductProfit + historicalData.totalCommissions
                        )}
                      </p>
                    )}
                  </div>
                    </div>

                    {/* Navegação alternativa para mobile - versão mais intuitiva e destacada */}
                    <div className="mb-6 md:hidden">
                      <div className="grid grid-cols-3 gap-2 mb-5">
                        <button
                          onClick={() => setActiveHistoryTab('resumo')}
                          className={`flex flex-col items-center justify-center p-3 rounded-lg transition-all duration-200 ${
                            activeHistoryTab === 'resumo' 
                              ? 'bg-gradient-to-b from-indigo-50 to-indigo-100 border-indigo-200 text-indigo-700 shadow-sm' 
                              : 'bg-white border border-gray-200 text-gray-600 hover:bg-gray-50'
                          }`}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                          </svg>
                          <span className="text-xs font-medium">Resumo</span>
                        </button>

                        <button
                          onClick={() => setActiveHistoryTab('atendimentos')}
                          className={`flex flex-col items-center justify-center p-3 rounded-lg transition-all duration-200 ${
                            activeHistoryTab === 'atendimentos' 
                              ? 'bg-gradient-to-b from-indigo-50 to-indigo-100 border-indigo-200 text-indigo-700 shadow-sm' 
                              : 'bg-white border border-gray-200 text-gray-600 hover:bg-gray-50'
                          }`}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                          <span className="text-xs font-medium">Atendimentos</span>
                        </button>

                        <button
                          onClick={() => setActiveHistoryTab('produtos')}
                          className={`flex flex-col items-center justify-center p-3 rounded-lg transition-all duration-200 ${
                            activeHistoryTab === 'produtos' 
                              ? 'bg-gradient-to-b from-indigo-50 to-indigo-100 border-indigo-200 text-indigo-700 shadow-sm' 
                              : 'bg-white border border-gray-200 text-gray-600 hover:bg-gray-50'
                          }`}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                          </svg>
                          <span className="text-xs font-medium">Produtos</span>
                        </button>
                      </div>
                    </div>
                    
                    {/* Tabs de navegação do histórico - versão desktop */}
                    <div className="border-b border-gray-200 mb-6 hidden md:block">
                      <nav className="-mb-px flex space-x-8 overflow-x-auto pb-2 md:pb-0 whitespace-nowrap" aria-label="Tabs">
                        <button
                          onClick={() => setActiveHistoryTab('resumo')}
                          className={`${
                            activeHistoryTab === 'resumo'
                              ? 'border-indigo-500 text-indigo-600'
                              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                          } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex-shrink-0`}
                        >
                          Resumo Geral
                        </button>
                        <button
                          onClick={() => setActiveHistoryTab('atendimentos')}
                          className={`${
                            activeHistoryTab === 'atendimentos'
                              ? 'border-indigo-500 text-indigo-600'
                              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                          } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex-shrink-0`}
                        >
                          Histórico de Atendimentos
                        </button>
                        <button
                          onClick={() => setActiveHistoryTab('produtos')}
                          className={`${
                            activeHistoryTab === 'produtos'
                              ? 'border-indigo-500 text-indigo-600'
                              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                          } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex-shrink-0`}
                        >
                          Vendas de Produtos
                        </button>
                      </nav>
                    </div>

                    {/* Conteúdo das tabs */}
                    {activeHistoryTab === 'atendimentos' && (
                      <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-4">Histórico de Atendimentos</h3>
                        
                        {/* Versão desktop: tabela completa */}
                        <div className="hidden md:block bg-white border border-gray-200 rounded-lg overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Data
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Profissional
                              </th>
                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                  Cliente
                                </th>
                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                  Forma de Pagamento
                              </th>
                              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Valor
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                              {historicalData.cashClosings.map((closing, index) => (
                                <tr key={`appointment-${closing.id}-${index}`} className="hover:bg-gray-50">
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {format(parseISO(closing.date), 'dd/MM/yyyy')}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {closing.professional?.name || 'Profissional não especificado'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {closing.client?.name || 'Cliente não especificado'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {closing.payment_method || 'Não especificado'}
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                                    {formatCurrency(Number(closing.total_value) || 0)}
                                  </td>
                                </tr>
                              ))}
                          </tbody>
                        </table>
                      </div>

                        {/* Versão mobile: cartões responsivos */}
                        <div className="md:hidden space-y-4">
                          {historicalData.cashClosings.length === 0 ? (
                            <div className="text-center p-6 text-gray-500">
                              Nenhum atendimento encontrado para o período selecionado.
                            </div>
                          ) : (
                            historicalData.cashClosings.map((closing, index) => (
                              <div 
                                key={`appointment-mobile-${closing.id}-${index}`} 
                                className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200"
                              >
                                <div className="flex justify-between items-center mb-3">
                                  <div className="text-sm font-semibold text-indigo-600">
                                    {format(parseISO(closing.date), 'dd/MM/yyyy')}
                                    {closing.time && ` - ${closing.time}`}
                                  </div>
                                  <div className="text-base font-bold text-gray-900">
                                    {formatCurrency(Number(closing.total_value) || 0)}
                                  </div>
                                </div>
                                
                                <div className="grid grid-cols-2 gap-2 text-sm">
                                  <div className="col-span-2">
                                    <span className="font-medium text-gray-700">Cliente:</span>{' '}
                                    <span className="text-gray-900">{closing.client?.name || 'Cliente não especificado'}</span>
                                  </div>
                                  
                                  <div className="col-span-2">
                                    <span className="font-medium text-gray-700">Profissional:</span>{' '}
                                    <span className="text-gray-900">{closing.professional?.name || 'Profissional não especificado'}</span>
                                  </div>
                                  
                                  <div className="col-span-2">
                                    <span className="font-medium text-gray-700">Pagamento:</span>{' '}
                                    <span className="text-gray-900">{closing.payment_method || 'Não especificado'}</span>
                                  </div>

                                  {/* Informações detalhadas de pagamento se disponíveis */}
                                  {closing.payment_methods && (
                                    <div className="col-span-2 mt-2 pt-2 border-t border-gray-100">
                                      <div className="flex justify-between text-xs text-gray-500">
                                        <span>Método de pagamento:</span>
                                        <span>{closing.payment_methods.name}</span>
                                      </div>
                                      {closing.payment_methods.fee > 0 && (
                                        <>
                                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span>Taxa de pagamento:</span>
                                            <span>{closing.payment_methods.fee}%</span>
                                          </div>
                                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span>Valor da taxa:</span>
                                            <span className="text-red-500">-{formatCurrency(Number(closing.total_value) * (closing.payment_methods.fee / 100))}</span>
                                          </div>
                                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span>Valor líquido:</span>
                                            <span className="font-medium">{formatCurrency(Number(closing.total_value) * (1 - (closing.payment_methods.fee / 100)))}</span>
                                          </div>
                                        </>
                                      )}
                                    </div>
                                  )}
                                  
                                  {closing.products && closing.products.length > 0 && (
                                    <div className="col-span-2 mt-2 pt-2 border-t border-gray-100">
                                      <div className="font-medium text-gray-700 mb-1">Produtos:</div>
                                      <div className="pl-2 border-l-2 border-gray-200 text-xs space-y-2">
                                        {closing.products.map((product, idx) => (
                                          <div key={`product-${idx}`} className="mb-1">
                                            <div className="flex justify-between">
                                              <span>{product.name || 'Produto'}</span>
                                              <span>{typeof product.quantity === 'string' ? product.quantity : product.quantity || 1}x {formatCurrency(typeof product.price === 'string' ? parseFloat(product.price) : product.price || 0)}</span>
                                            </div>
                                            <div className="flex justify-between text-gray-500">
                                              <span>Subtotal:</span>
                                              <span>{formatCurrency((typeof product.price === 'string' ? parseFloat(product.price) : product.price || 0) * (typeof product.quantity === 'string' ? parseFloat(product.quantity) : product.quantity || 1))}</span>
                                            </div>
                                          </div>
                                        ))}
                                      </div>
                                    </div>
                                  )}
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                    </div>
                    )}

                    {activeHistoryTab === 'produtos' && (
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-4">Histórico de Vendas de Produtos</h3>
                      
                      {/* Versão desktop: tabela completa */}
                      <div className="hidden md:block bg-white border border-gray-200 rounded-lg overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Data
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Produto
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Cliente
                              </th>
                              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Origem
                              </th>
                              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Quantidade
                              </th>
                              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Preço Unit.
                              </th>
                              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Total
                              </th>
                              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Lucro
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                              {historicalData.productSales?.map((product, index) => (
                                <tr key={`${product.id || 'product'}-${product.date}-${index}`} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  {format(parseISO(product.date), 'dd/MM/yyyy')}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {product.name || 'Produto não encontrado'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {product.client?.name || 'Cliente não especificado'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm">
                                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                    product.source === 'appointment' 
                                      ? 'bg-blue-100 text-blue-800'
                                      : 'bg-emerald-100 text-emerald-800'
                                  }`}>
                                    {product.source === 'appointment' ? 'Atendimento' : 'Venda Direta'}
                                  </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                                  {Number(product.quantity)}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                                  {formatCurrency(Number(product.price))}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                                  {formatCurrency(Number(product.price) * Number(product.quantity))}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-emerald-600 text-right font-medium">
                                  {formatCurrency((Number(product.price) - Number(product.cost_price || 0)) * Number(product.quantity))}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>

                      {/* Versão mobile: cartões responsivos */}
                      <div className="md:hidden space-y-4">
                        {historicalData.productSales?.map((product, index) => (
                          <div 
                            key={`product-mobile-${product.id || 'product'}-${index}`} 
                            className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200"
                          >
                            <div className="flex justify-between items-center mb-3">
                              <div className="text-sm font-semibold text-indigo-600">
                                {format(parseISO(product.date), 'dd/MM/yyyy')}
                            </div>
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                product.source === 'appointment' 
                                  ? 'bg-blue-100 text-blue-800'
                                  : 'bg-emerald-100 text-emerald-800'
                              }`}>
                                {product.source === 'appointment' ? 'Atendimento' : 'Venda Direta'}
                              </span>
                            </div>
                            
                            <div className="mb-3">
                              <h4 className="text-base font-medium text-gray-900">{product.name || 'Produto não encontrado'}</h4>
                              <p className="text-sm text-gray-600">
                                {product.client?.name || 'Cliente não especificado'}
                              </p>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-2 text-sm">
                              <div>
                                <span className="font-medium text-gray-700">Quantidade:</span>{' '}
                                <span className="text-gray-900">{Number(product.quantity)}</span>
                            </div>
                              
                              <div className="text-right">
                                <span className="font-medium text-gray-700">Preço Unit.:</span>{' '}
                                <span className="text-gray-900">{formatCurrency(Number(product.price))}</span>
                            </div>
                              
                              <div>
                                <span className="font-medium text-gray-700">Total:</span>{' '}
                                <span className="text-gray-900">{formatCurrency(Number(product.price) * Number(product.quantity))}</span>
                            </div>
                              
                              <div className="text-right">
                                <span className="font-medium text-gray-700">Lucro:</span>{' '}
                                <span className="text-emerald-600 font-medium">{formatCurrency((Number(product.price) - Number(product.cost_price || 0)) * Number(product.quantity))}</span>
                          </div>

                              {product.originalPrice && product.payment_fee_percent && (
                                <>
                                  <div className="col-span-2 mt-2 pt-2 border-t border-gray-100">
                                    <div className="flex justify-between text-xs text-gray-500">
                                      <span>Preço bruto:</span>
                                      <span>{formatCurrency(Number(product.originalPrice))}</span>
                        </div>
                      </div>
                                  
                                  <div className="col-span-2">
                                    <div className="flex justify-between text-xs text-gray-500">
                                      <span>Taxa ({product.payment_fee_percent.toFixed(2)}%):</span>
                                      <span>- {formatCurrency(Number(product.originalPrice) * (product.payment_fee_percent / 100))}</span>
                                    </div>
                                  </div>
                                  
                                  <div className="col-span-2">
                                    <div className="flex justify-between text-xs text-gray-500">
                                      <span>Preço líquido:</span>
                                      <span className="font-medium">{formatCurrency(Number(product.price))}</span>
                                    </div>
                                  </div>
                                  
                                  <div className="col-span-2">
                                    <div className="flex justify-between text-xs text-gray-500">
                                      <span>Custo:</span>
                                      <span>{formatCurrency(Number(product.cost_price || 0))}</span>
                                    </div>
                                  </div>
                                  
                                  <div className="col-span-2">
                                    <div className="flex justify-between text-xs text-gray-500">
                                      <span>Margem de lucro:</span>
                                      <span>{((Number(product.price) - Number(product.cost_price || 0)) / Number(product.price) * 100).toFixed(2)}%</span>
                                    </div>
                                  </div>
                                </>
                              )}
                            </div>
                          </div>
                        ))}
                        
                        {historicalData.productSales?.length === 0 && (
                          <div className="text-center p-6 text-gray-500">
                            Nenhuma venda de produto encontrada para o período selecionado.
                          </div>
                        )}
                      </div>
                    </div>
                    )}

                    {activeHistoryTab === 'resumo' && (
                      renderResumoGeral()
                    )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}